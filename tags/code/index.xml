<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Jotschi&#39;s Blog</title>
    <link>http://jotschi.de/tags/code/</link>
    <description>Recent content in Code on Jotschi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Dec 2008 21:53:16 +0000</lastBuildDate>
    <atom:link href="http://jotschi.de/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AsynchronousBufferedInputStreamWrapper</title>
      <link>http://jotschi.de/2008/12/02/asynchronousbufferedinputstreamwrapper/</link>
      <pubDate>Tue, 02 Dec 2008 21:53:16 +0000</pubDate>
      
      <guid>http://jotschi.de/2008/12/02/asynchronousbufferedinputstreamwrapper/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Some time ago i was looking for a nice and quiet fast implementation for a buffered inputstream. I found some pieces and finally i came up with this one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just create a new AsynchronousBufferedInputStreamWrapper by using your unbuffered InputStream and the buffersize of your choice (eg. 512*256)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Invoke startBuffering() to start the buffering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;getBufferLevel() will return the current level of the buffer in percent of maximum.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This implementation is untested but it might be useful for someone. Please note also that you might have to change my logger implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.TimeUnit;

import org.apache.log4j.Logger;
import org.schueth.snplayer.utils.SimpleLogger;

public class AsynchronousBufferedInputStreamWrapper extends InputStream {

	Thread thread;
	BufferingThread buffering;
	Logger logger = SimpleLogger.getLogger();

	public AsynchronousBufferedInputStreamWrapper(InputStream inputStream,
			int bufferSizeInBytes) {

		buffering = new BufferingThread(this, new BufferedInputStream(
				inputStream, bufferSizeInBytes), bufferSizeInBytes);
	}

	public float getBufferLevel() {
		return buffering.getBufferLevel();
	}

	public void startBuffering() {
		logger.debug(&#34;Buffering started&#34;);
		thread = new Thread(buffering);
		thread.start();
	}

	@Override
	public int read() throws IOException {

		if (this.thread == null) {
			logger.info(&#34;MANUAL OVERRIDE!&#34;);
			startBuffering();
		}
		waitForCurrentByteBuffer();
		if (reachedEndOfStream()) {
			return -1;
		}

		byte b = buffering.currentByteBuffer[buffering.currentBufferPosition];
		buffering.currentBufferPosition++;
		buffering.overallBytesConsumed++;
		return b &amp;amp; 0xFF;
	}

	private boolean reachedEndOfStream() {
		return buffering.overallBytesConsumed == buffering.overallBytesBuffered;
	}

	private void waitForCurrentByteBuffer() {
		if (buffering.currentByteBuffer == null
				|| buffering.currentBufferPosition &amp;gt; buffering.currentByteBuffer.length - 1) {
			buffering.currentByteBuffer = null;
			while (buffering.currentByteBuffer == null &amp;amp;&amp;amp; !reachedEndOfStream()) {
				// System.out.println(&#34;Getting Queue element&#34;);
				buffering.currentByteBuffer = buffering.dataQueue.poll();
				buffering.currentBufferPosition = 0;
				try {
					TimeUnit.MILLISECONDS.sleep(5L);
				} catch (InterruptedException e) {
					logger.error(e);
				}
			}
		}
	}

	@Override
	public void close() throws IOException {
		super.close();
		this.thread.stop();
	}
}

class BufferingThread implements Runnable {

	AsynchronousBufferedInputStreamWrapper reference;
	Logger logger = SimpleLogger.getLogger();

	public static final int DEFAULT_BUFFER_SEGMENTSIZE = 128 * 1024;
	volatile boolean eof = false;

	volatile BufferedInputStream wrappedInputStream;
	volatile ConcurrentLinkedQueue&amp;lt;byte[]&amp;gt; dataQueue;
	int maxDataQueueSize;
	volatile int overallBytesConsumed = 0;
	int currentBufferPosition;

	volatile int totalBufferSizeInBytes;
	volatile int bufferSizeInBytes;
	volatile int overallBytesBuffered;
	int lastCurrentBytesBuffered;
	int currentBytesBuffered;
	byte[] currentByteBuffer;

	public BufferingThread(AsynchronousBufferedInputStreamWrapper reference,
			BufferedInputStream wrappedInputStream, int totalBufferSizeInBytes) {

		this.reference = reference;
		this.wrappedInputStream = wrappedInputStream;
		this.dataQueue = new ConcurrentLinkedQueue&amp;lt;byte[]&amp;gt;();

		this.totalBufferSizeInBytes = totalBufferSizeInBytes;
		this.maxDataQueueSize = totalBufferSizeInBytes
				/ DEFAULT_BUFFER_SEGMENTSIZE;
		this.bufferSizeInBytes = DEFAULT_BUFFER_SEGMENTSIZE;

		logger.info(&#34;totalBufferSizeInBytes: &#34; + totalBufferSizeInBytes);
		logger.info(&#34;maxDataQueueSize: &#34; + maxDataQueueSize);
		logger.info(&#34;bufferSizeInBytes: &#34; + bufferSizeInBytes);

	}

	public float getBufferLevel() {
		logger.debug(&#34;overallBytesBuffered: &#34; + overallBytesBuffered);
		logger.debug(&#34;overallBytesConsumed: &#34; + overallBytesConsumed);
		logger.debug(&#34;dataQueue.size(): &#34; + dataQueue.size());
		logger.debug(&#34;totalBufferSizeInBytes: &#34; + totalBufferSizeInBytes);
		if (overallBytesBuffered == 0 || (overallBytesBuffered==overallBytesConsumed)) {
			return 0;
		}

		return (((float)overallBytesConsumed / (float)overallBytesBuffered)-1 )*-1;

	}

	public void run() {

		currentBytesBuffered = overallBytesBuffered - overallBytesConsumed;

		while (!eof) {

			try {

				// check if buffer is not full
				if (dataQueue.size() &amp;lt; maxDataQueueSize) {

					// System.out.println(&#34;Buffering...&#34;);
					ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

					// check if buffer is not full
					while (currentBytesBuffered &amp;lt; bufferSizeInBytes) {
						byte[] buffer = new byte[bufferSizeInBytes];
						int bytesRead = wrappedInputStream.read(buffer);

						if (bytesRead == -1) {
							// EOF
							logger.error(&#34;EOF&#34;);
							wrappedInputStream.close();
							eof = true;
							break;
						}

						// writing bytes to os
						byteArrayOutputStream.write(buffer, 0, bytesRead);
						overallBytesBuffered += bytesRead;

						currentBytesBuffered = overallBytesBuffered
								- overallBytesConsumed;

					}

					if (!eof) {
						// Adding byte array to queue
						dataQueue.add(byteArrayOutputStream.toByteArray());
						currentBytesBuffered = 0;
					}

				} else {
					TimeUnit.MILLISECONDS.sleep(4L);
				}
			} catch (Exception e) {
				logger.error(e);
			}
		}

		logger.info(&#34;Finished Buffering&#34;);
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
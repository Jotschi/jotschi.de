<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chroot on Jotschi&#39;s Blog</title>
    <link>http://jotschi.de/tags/chroot/</link>
    <description>Recent content in Chroot on Jotschi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jul 2011 18:36:49 +0000</lastBuildDate>
    <atom:link href="http://jotschi.de/tags/chroot/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Eclipse CDT Cross Platform Development Within A Chroot Environment</title>
      <link>http://jotschi.de/2011/07/08/eclipse-cdt-cross-platform-development-within-a-chroot-environment/</link>
      <pubDate>Fri, 08 Jul 2011 18:36:49 +0000</pubDate>
      
      <guid>http://jotschi.de/2011/07/08/eclipse-cdt-cross-platform-development-within-a-chroot-environment/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This post is about how to configure eclipse to work with a chroot environment that is setup for cross compiling against ARM architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please refer to my post &amp;lt;a href=&#34;http://jotschi.de/?p=594&#34;&amp;gt;Cross Compile Pandaboard PowerVR OpenGL ES2 Example&amp;lt;/a&amp;gt; if you want to know how to setup a chroot environment for cross compiling.
&amp;lt;a id=&#34;more&#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;a id=&#34;more-615&#34;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_1_install_sudo_and_configure_sudo&#34;&gt;1. Install sudo and configure sudo&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Install sudo:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install sudo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Allow every user that is within the sudo group to execute the chroot command without entering a password by adding the line to /etc/sudoers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;/etc/sudoers&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;%sudo   ALL= NOPASSWD: /usr/sbin/chroot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_2_prepare_the_project&#34;&gt;2. Prepare the project&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The project must be located within the within the chroot environment. You could use bind mounts to create a mountpoint that connects your workspace project with a folder inside the chroot enviroment. I just placed the project itself inside the chroot environment and created a symlink that points to my workspace. Keep in mind to close your project or eclipse if you move the project files outside of eclipse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1. Create your CDT project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2. Close the project within eclipse.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3. Move the project directory from e.g.: ~/workspace/MyProject/ to ~/mychroot/opt/MyProject&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4. Create a symlink inside of ~/workspace with the name &amp;lt;i&amp;gt;MyProject&amp;lt;/i&amp;gt; that points to ~/mychroot/opt/MyProject&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5. Open the project within eclipse&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;h3&amp;gt;3. Create a external build script&amp;lt;/h3&amp;gt;
This example script (e.g: ~/workspace/MyProject/compile.sh) will execute the bash command inside of the chroot environment which is located at $HOME/mychroot. The bash command will switch into the project location inside the chroot environment and execute make. Of course you can optimize the script to make it more generic and so on. But for now i&amp;#8217;ll keep it simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;#!/bin/bash
sudo chroot $HOME/mychroot/  bash -c &#39;cd /opt/MyProject/; make clean; make&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_4_configure_your_eclipse_cdt_project&#34;&gt;4. Configure your eclipse cdt project&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we have to change the builder for our project. Since we don&amp;#8217;t want to use the host environment to build the project we need to tell eclipse to use our compile.sh script which we created earlier. Go into &amp;lt;i&amp;gt;project properties &amp;#8594; C/C++ Build &amp;#8594; Builder Settings&amp;lt;/i&amp;gt; and select &lt;em&gt;External builder&lt;/em&gt;. Point the Build command to your compile.sh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To fix syntax errors within your project you have to add the correct includes of course. Go to &amp;lt;i&amp;gt;project properties &amp;#8594; C/C++ Build &amp;#8594; Setting &amp;#8594; Tool Settings&amp;lt;/i&amp;gt; and add the include directories from your chroot enviroment. If you are using xapt to install cross libraries please note that those files are usually located at &lt;em&gt;/usr/arm-linux-gnueabi/&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Example for libx11-dev&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@NeXuS:/# dpkg -L  libx11-dev-armel-cross
/.
/usr
/usr/share
/usr/share/doc
/usr/share/doc/libx11-dev-armel-cross
/usr/share/doc/libx11-dev-armel-cross/README
/usr/arm-linux-gnueabi
/usr/arm-linux-gnueabi/include
/usr/arm-linux-gnueabi/include/X11
/usr/arm-linux-gnueabi/include/X11/Xregion.h
/usr/arm-linux-gnueabi/include/X11/Xresource.h
/usr/arm-linux-gnueabi/include/X11/Xlib.h
/usr/arm-linux-gnueabi/include/X11/cursorfont.h
/usr/arm-linux-gnueabi/include/X11/XKBlib.h
/usr/arm-linux-gnueabi/include/X11/Xlibint.h
/usr/arm-linux-gnueabi/include/X11/Xutil.h
/usr/arm-linux-gnueabi/include/X11/XlibConf.h
/usr/arm-linux-gnueabi/include/X11/ImUtil.h
/usr/arm-linux-gnueabi/include/X11/Xlocale.h
/usr/arm-linux-gnueabi/include/X11/Xcms.h
/usr/arm-linux-gnueabi/lib
/usr/arm-linux-gnueabi/lib/pkgconfig
/usr/arm-linux-gnueabi/lib/pkgconfig/x11.pc
/usr/arm-linux-gnueabi/lib/libX11.a
/usr/arm-linux-gnueabi/lib/libX11.so&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
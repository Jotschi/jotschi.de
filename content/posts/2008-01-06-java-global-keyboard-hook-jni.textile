--- 
layout: post
status: publish
published: true
title: Java Global Keyboard/Mouse Hook - JNI
author: Jotschi
author_login: Jotschi
author_email: webmaster@jotschi.de
author_url: http://www.jotschi.de
excerpt: "<h2>\r\n\
  UPDATE:\r\n\
  This code was written a long time ago and does not work with Windows Vista/7. \r\n\
  Please check out a newer version which was rewritten by Kristian Kraljic.\r\n\
  </h2>\r\n\
  &gt;&gt; <a href=\"http://ksquared.de/blog/2011/07/java-global-system-hook/\">Java Global (low level) Keyboard / Mouse Hook JNI</a> &lt;&lt;\r\n\
  \r\n"
wordpress_id: 90
wordpress_url: /?p=90
date: 2008-01-06 14:39:01 +00:00
categories: 
- Technik
tags: []

comments: 
- id: 56
  author: Günter
  author_email: grafgue@gmx.at
  author_url: ""
  date: 2008-01-17 21:16:56 +0000
  date_gmt: 2008-01-17 19:16:56 +0000
  content: "Hi!\r\n\
    War schon länger auf der Suche nach einem Hook für Maus und Tastatur und bin jetzt endlich fündig geworden!!!\r\n\
    \r\n\
    Leider klappt das Example Programm bei mir nicht ganz.\r\n\
    Ich krieg folgenden StackTrace, wenn ich Example.java starte:\r\n\
    \r\n\
    Exception in thread \"Thread-0\" java.lang.UnsatisfiedLinkError: core.SysHook.registerHook(Lcore/GlobalEventListener;)V\r\n\
    \tat core.SysHook.registerHook(Native Method)\r\n\
    \tat core.PoolHook.run(SysHook.java:15)\r\n\
    C++: DllMain - DLL_PROCESS_ATTACH.\r\n\
    \r\n\
    \r\n\
    Als Entwicklungsumgebung verwende ich Eclipse 3.3.\r\n\
    Könntest du mir bitte kurz erklären, wie ich das Programm zum Laufen bekomme?\r\n\
    \r\n\
    lg, Günter"
- id: 57
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.jotschi.de
  date: 2008-01-17 22:55:51 +0000
  date_gmt: 2008-01-17 20:55:51 +0000
  content: "Hallo Günter,\r\n\
    \r\n\
    UnsatisfiedLinkError bedeutet das er die native libary ('SysHook.DLL') nicht findet. In dem Fall müsstest du noch bei deinen Projekteigenschaften -> Java Build Path -> Source bzw. Libarys -> Native libary location diese noch eintragen."
- id: 58
  author: Günter
  author_email: grafgue@gmx.at
  author_url: ""
  date: 2008-01-18 18:42:48 +0000
  date_gmt: 2008-01-18 16:42:48 +0000
  content: "Hi, jotschi!\r\n\
    \r\n\
    Danke für die Hilfe!\r\n\
    \r\n\
    Klar, wie konnte ich das vergessen! Außerdem hatte ich die Java Klassen nicht im default package. das gefällt dem JNI auch nicht ;-)\r\n\
    \r\n\
    Ok, hab das Programm mal zum Laufen gebracht.\r\n\
    Beim Testen ist mir aufgefallen, dass das keyReleased Event niemals auftritt, sondern statt des keyReleased das keyPressed. Ich hab das mal behoben.\r\n\
    Außerdem war der MouseEventListener noch nicht implementiert. Ich habs zumindest so weit zusammen gebracht, dass man nun die aktuelle Mausposition erfragen kann.\r\n\
    Wenn du magst, kann ich dir den code irgendwie zukommen lassen. Mail?\r\n\
    \r\n\
    Zwei Dinge würden mich noch interessieren:\r\n\
    1) Wie könnte man MausKLICKS abfangen?\r\n\
    2) Wie kann man verhindern, dass Maus- und/oder Tastaturereignisse ans System weitergeleitet werden? Ich würde diese Funktionalität nämlich benötigen.\r\n\
    Cool wäre es, wenn man irgendeine Taste (oder eine Kombination) definieren könnte, mit der man switchen kann, ob die Events weiter geleitet werden sollen oder nicht. Ich möchte also nur, dass meinem Programm mitgeteilt wird, dass irgendwelche Events aufgetreten sind, jedoch sollen die Events nichts am Bildschirm bewirken.\r\n\
    \r\n\
    Zum Hintergrund der Fragen:\r\n\
    Ich habe eine Logitech G15 Tastatur mit integriertem LCD, für die man Applets schreiben kann. Da ich dank dir nun in der Lage bin, Maus- und Tastatureingaben abzufragen, kann ich diese Informationen dazu benutzen, Interaktionen am Display zu realisieren.\r\n\
    Nun wäre es aber störend, wenn alle Eingaben, die dann für das LCD bestimmt sind, auch ans System weitergeleitet werden.\r\n\
    \r\n\
    lg und vielen Dank nochmal für deine Hilfe!"
- id: 59
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.jotschi.de
  date: 2008-01-19 11:49:01 +0000
  date_gmt: 2008-01-19 09:49:01 +0000
  content: "Hi Günter, \r\n\
    \r\n\
    Interessantes Stück Hardware. Kannst du mal einen Link vom Hersteller Posten?\r\n\
    Wenn du möchtest kannst du die Sources an: webmaster[AT]jotschi.de schicken. Ich würde sie dann hochladen und verlinken.\r\n\
    \r\n\
    Zu deinen Fragen. Ja ich denke es ist möglich die Eingabenweiterleitung zu unterdrücken. Dies ist aber natürlich Sache der Hook.DLL \r\n\
    \r\n\
    Ich bin mir nicht sicher.. da müsstest du selbst nochmal genauer danach suchen aber ich glaube..\r\n\
    \r\n\
    In der Methode: \r\n\
    LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)\r\n\
    \r\n\
    wird am Ende:\r\n\
    return CallNextHookEx(NULL, nCode, wParam, lParam);\r\n\
    ausgeführt.\r\n\
    Um die spezifische Taste zu unterdrücke müsste man glaube ich etwas anderes returnen.\r\n\
    \r\n\
    return CallNextHookEx((IntPtr)0, 0, wParam, (IntPtr)0); \r\n\
    oder\r\n\
    return new IntPtr(1);\r\n\
    \r\n\
    Was IntPtr ist weiß ich nicht genau.. Irgendein C# Kram. Versuch mal herrauszufinden was das Gegenstück in CPP ist. Ich würde eine JNI Methode hinzufügen die den Keycode übergeben bekommt und dann true oder false zurückgibt je nach dem ob die Taste im JavaCode als \"blocked\" registriert ist. Je nach True oder False würde dann in der Hook.DLL der Keycode durchgelassen oder nicht.\r\n\
    \r\n\
    Zum Mausklick. \r\n\
    Den habe ich glaube ich auch nicht abgefangen. Da müsstest du die JNI Methode und Hook.DLL auch erweitern.\r\n\
    \r\n\
    Der Tastendruck steckt <strike>entweder</strike> in:\r\n\
    <strike>MOUSEHOOKSTRUCT* pStruct = (MOUSEHOOKSTRUCT*)lParam;</strike>\r\n\
    oder in wParam ähnlich wie beim KeyboardHook.\r\n\
    Hier müsstest du denke ich nur die JNI Methode um einen Parameter erweitern und den Aufruf in der HOOK.DLL ändern.\r\n\
    \r\n\
    \"env->CallVoidMethod(hookObj_ms, processKeyID_ms, (jint)pStruct->pt.x,(jint)pStruct->pt.y, g_kl);\"\r\n\
    \r\n\
    Ausserdem natürlich den MouseEvent um Klick erweitern.\r\n\
    \r\n\
    Gruß Jotschi"
- id: 60
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.jotschi.de
  date: 2008-01-19 11:59:46 +0000
  date_gmt: 2008-01-19 09:59:46 +0000
  content: "Anmerkung:\r\n\
    \r\n\
    Die MOUSEHOOKSTRUCT ist hier definiert.\r\n\
    <a href=\"http://msdn2.microsoft.com/en-us/library/ms644968(VS.85).aspx\"  target=_blank rel=\"nofollow\">MSDN Referenz</a>\r\n\
    \r\n\
    Sie gibt mittels wHitTestCode Informationen darüber wo die Maus geklickt hat. ( Im Maximieren Button, Im Minimieren Button usw usw. ) \r\n\
    \r\n\
    Ja, ich hatte Recht. Die Informationen stecken in WParam:\r\n\
    \r\n\
    <a href=\"http://msdn2.microsoft.com/en-us/library/ms644986(VS.85).aspx\" target=_blank rel=\"nofollow\">MSDN Referenz</a>\r\n\
    \r\n\
    Gruß Jotschi"
- id: 61
  author: Günter
  author_email: grafgue@gmx.at
  author_url: ""
  date: 2008-01-20 19:18:04 +0000
  date_gmt: 2008-01-20 17:18:04 +0000
  content: "Hallo, Jotschi!\r\n\
    \r\n\
    Danke für die Hinweise. Ich werd mal versuchen, das umzusetzen.\r\n\
    Link zur G15 ist dieser: http://www.logitech.com/index.cfm/gaming/pc_gaming/mice_keyboards/devices/3498&amp;cl=at,de\r\n\
    Wobei ich empfehlen würd, die Tastatur in einem Shop zu kaufen, da man sie dort um gut 1/3 billiger bekommt.\r\n\
    \r\n\
    Wegen der Sourcen bitte ich dich noch um etwas Geduld. Ich möchts erst veröffentlichen, wenn ein herzeigbarer Stand da ist. Sollte aber in 2-3 Wochen so weit sein.\r\n\
    Komm leider nicht immer zum Coden.\r\n\
    Von der grafischen Seite her fehlt eigentlich nicht mehr viel. Bis jetzt kann man Labels, Progress Bars, Gauges, Container und Scroll Panes erstellen.\r\n\
    Nun möchte ich noch so etwas wie Tabs (also Reiter) implementieren.\r\n\
    \r\n\
    Ja und dann würd ich noch gern die Maus- und Tastaturanbindung einbauen wie oben beschrieben. Dann könnte man die Tabs auch bequemer steuern.\r\n\
    \r\n\
    Werd mir mal ne Entwicklungsumgebung für C(++) runter laden, damit ich die Änderungen der Hooks implementieren kann.\r\n\
    Für Hilfe diesbezüglich bin ich gerne offen und werd dich natürlich auch in den Credits erwähnen! Auch der Java Wrapper zur Ansteuerung des Displays ist ja nicht von mir.\r\n\
    Ich hab lediglich das Framework geschrieben, mit dem man dann leichter Applets coden kann.\r\n\
    \r\n\
    lg"
- id: 62
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.jotschi.de
  date: 2008-01-20 19:59:38 +0000
  date_gmt: 2008-01-20 17:59:38 +0000
  content: "Feine Sache, viel Erfolg damit!\r\n\
    IDE brauchst du eigentlich keine. Im Grunde müsste Cygwin+GCC reichen. Aber ne IDE ist schon etwas bequemer."
- id: 66
  author: Simon
  author_email: Blalap@gmx.de
  author_url: ""
  date: 2008-03-02 18:25:22 +0000
  date_gmt: 2008-03-02 16:25:22 +0000
  content: "Hallo Günter, Jotschi,\r\n\
    \r\n\
    habt ihr dass hinbekommen, dass auch MouseEvents gefangen werden. Wenn ja, würde mich interessieren wie. Würde mich über eine neue Version freuen"
- id: 68
  author: Günter
  author_email: grafgue@gmx.at
  author_url: ""
  date: 2008-03-08 17:18:56 +0000
  date_gmt: 2008-03-08 15:18:56 +0000
  content: "Hallo, Simon!\r\n\
    \r\n\
    Da ich gerade für die SCJP Prüfung lerne, habe ich das Projekt zur Zeit auf Eis gelegt. Ich werde später sicher aber daran weiter arbeiten.\r\n\
    Falls du (oder Jotschi) in der Zwischenzeit neue Erkenntnisse gewinnen könnt/konntet, würde ich mich freuen, darüber zu hören.\r\n\
    \r\n\
    lg"
- id: 69
  author: Tobias
  author_email: only_a_fake@web.de
  author_url: ""
  date: 2008-03-15 02:17:52 +0000
  date_gmt: 2008-03-15 00:17:52 +0000
  content: "Hallo, \r\n\
    ich suche auch schon seit einer ganzen Weile nach einer solchen Lösung, jedoch reichen meine Kenntnisse leider nicht aus um auch nur im Ansatz etwas zum laufen zu bekommen, könnte jemand evt nocheinmal detaillierter erläutern wo man die dll hinpacken muss und auf was noch zu achten ist.\r\n\
    Es wäre echt total super.\r\n\
    (Ich benutze zzt noch den Java-Editor)\r\n\
    \r\n\
    mfg Tobias"
- id: 70
  author: Günter
  author_email: grafgue@gmx.at
  author_url: ""
  date: 2008-03-20 15:51:15 +0000
  date_gmt: 2008-03-20 13:51:15 +0000
  content: "Kenne den Java Editor leider nicht.\r\n\
    Mit Eclipse könnt ich dir weiter helfen."
- id: 73
  author: Steven
  author_email: stevenriegel@gmx.de
  author_url: ""
  date: 2008-04-15 13:03:14 +0000
  date_gmt: 2008-04-15 11:03:14 +0000
  content: "Hey,\r\n\
    ich habe das gleiche Problem wie Tobias, verwende aber Eclipse. Könnte mir vielleicht jemand verraten was ich noch konfigurieren muss damit der UnsatisfiedLinkError wegen der DLL nicht mehr auftritt?\r\n\
    \r\n\
    Vielen Dank,\r\n\
    Steven"
- id: 74
  author: Steven
  author_email: stevenriegel@gmx.de
  author_url: ""
  date: 2008-04-15 13:54:54 +0000
  date_gmt: 2008-04-15 11:54:54 +0000
  content: "Trotz einer Exception, scheint das Ausführung der DLL zumindest teilweise zu funktionieren. Siehe hierzu die Ausgabe:\r\n\
    Exception in thread \"Thread-0\" java.lang.UnsatisfiedLinkError: registerHook\r\n\
    \tat src.SysHook.registerHook(Native Method)\r\n\
    \tat src.PoolHook.run(PoolHook.java:23)\r\n\
    C++: DllMain - DLL_PROCESS_ATTACH."
- id: 75
  author: Xlazarus
  author_email: xlazarus@lazarusware.at
  author_url: http://www.lazarusware.at
  date: 2008-04-16 15:40:22 +0000
  date_gmt: 2008-04-16 13:40:22 +0000
  content: "Hi Steven!\r\n\
    Wie schon oben erwähnt wurde, musst du 1) die native Library in den ClassPath einbinden bei Eclipse wie oben - und 2) sollten die zuständigen Java-Klassen im default-package liegen.\r\n\
    ... das ist leider so ein Ding, dass JNI packaging nicht so gerne mag .... ich arbeite aber an einer Lösung.\r\n\
    \r\n\
    @Jotschi: Spitzen Arbeit, danke nach so etwas suche ich auch schon länger ;)"
- id: 76
  author: Xlazarus
  author_email: xlazarus@lazarusware.at
  author_url: http://www.lazarusware.at
  date: 2008-04-16 16:27:24 +0000
  date_gmt: 2008-04-16 14:27:24 +0000
  content: "... so nochmal ich.\r\n\
    Das Problem mit dem default-package läßt sich so umgehen:\r\n\
    Das File SysHook.java in das package deiner Wahl einbinden\r\n\
    also oben \"package at.name.name2;\" reinschreiben.\r\n\
    Dann das file mit javac compilieren.\r\n\
    Dann mit dem entstandenen .class File mit <strong>javah -jni SysHook</strong> die SysHook.h Header-Datei erstellen.\r\n\
    Wenn jetzt das File im Editor anschaut, merkt man, dass sich die natvie Methodennamen geändert haben (eben durch den package-namen).\r\n\
    Jetzt noch die Methodennamen im cpp anpassen, dll erstellen und fertig.\r\n\
    \r\n\
    lg\r\n\
    XL"
- id: 77
  author: Steven
  author_email: stevenriegel@gmx.de
  author_url: ""
  date: 2008-04-17 10:14:32 +0000
  date_gmt: 2008-04-17 08:14:32 +0000
  content: "@Xlazarus\r\n\
    Danke für die Antwort, jedoch lag genau in dem Einbinden in den Classpath das Problem. Das hat nicht so wirklich geklappt.\r\n\
    Merkwürdigerweise funktioniert es aber jetzt, ohne das ich die DLL irgendwo eingetragen habe."
- id: 79
  author: Günter
  author_email: oeschger@t-online.de
  author_url: ""
  date: 2008-05-11 20:37:45 +0000
  date_gmt: 2008-05-11 18:37:45 +0000
  content: "hey günter wie hast du das problem behoben das es keine keyReleased Events erzeugt hat ?"
- id: 80
  author: Günter
  author_email: oeschger@t-online.de
  author_url: ""
  date: 2008-05-11 20:44:20 +0000
  date_gmt: 2008-05-11 18:44:20 +0000
  content: "void processKey(  boolean ts  ,int vk, GlobalEventListener gl) \r\n\
    \t{\r\n\
    \t\tKeyboardEvent event = new KeyboardEvent( this, ts, vk,false, false );\r\n\
    \t\tgl.keyPressed(event);\r\n\
    \t}\r\n\
    \r\n\
    \r\n\
    da was verändern oder"
- id: 81
  author: Günter
  author_email: oeschger@t-online.de
  author_url: ""
  date: 2008-05-11 20:49:14 +0000
  date_gmt: 2008-05-11 18:49:14 +0000
  content: |-
    void processKey(  boolean ts  ,int vk, GlobalEventListener gl) 
    	{
    		KeyboardEvent event = new KeyboardEvent( this, ts, vk,false, false );
    		if(ts)
    		gl.keyPressed(event);
    		else
    		gl.keyReleased(event);
    	}
    
    habs glaub geschafft
- id: 83
  author: Günter
  author_email: grafgue@gmx.at
  author_url: ""
  date: 2008-05-26 09:09:36 +0000
  date_gmt: 2008-05-26 07:09:36 +0000
  content: "Hallo, zusammen.\r\n\
    @ Andr\r\n\
    Ja, so sollte es passen.\r\n\
    Hab mich in letzter Zeit aber überhaupt nicht mehr mit der Thematik beschäftigt (SCJP Prüfung siehe oben).\r\n\
    Mit dem kleinen Bugfix funktioniert bei mir das Abfangen von Tastaturereignissen ausgezeichnet.\r\n\
    \r\n\
    @All\r\n\
    Jetzt bräuchte ich nur noch die Funktionalität, dass auch Mausklicks abgefangen werden.\r\n\
    Außerdem wäre es schön, wenn man irgendwie einstellen könnte, dass bestimmte Events (z. B. Tastendruck) NICHT ans System weiter geleitet werden.\r\n\
    Soll heißen, dass wenn ein Texteditor im Vordergrund läuft und man eine Taste drückt, man KEINEN TEXT schreibt.\r\n\
    Das wäre beim Bedienen des G15 Displays sehr sinnvoll, da man sonst lauter unnötiges Zeugs tippen würde, ohne dass mans will.\r\n\
    Dann sollte es natürlich einen Stop-Key oder so geben (z. B. Escape), der bewirkt, dass die Ereignisse wieder weiter geleitet werden.\r\n\
    Das ganze wird aber nur funktionieren, wenn man direkt in den C-Code eingreift. Der Code von Jotschi ist aber der erste C-Code den ich gelesen (und auch teilweise verstanden) habe.\r\n\
    Wenns um die Logik geht, kann ich mir gern was überlegen. Wäre schön, wenn sich jemand findet, der C(++) kann und das dann in code umsetzt.\r\n\
    \r\n\
    lg"
- id: 86
  author: Stefan
  author_email: stefanbuhl@gmx.net
  author_url: ""
  date: 2008-05-28 10:16:13 +0000
  date_gmt: 2008-05-28 08:16:13 +0000
  content: "Hi,\r\n\
    \r\n\
    ich habe folgendes Problem und bitte um Hilfe. \r\n\
    \r\n\
    Wenn ich die runtergeladene *.dll von hier nehme, funktioniert alles wunderbar (auch ohne einen classpath zu setzen, da die *.dll im aktuellen user working directory liegt). Wenn ich eine eigene *.dll baue, kommt dieser UnsatisfiedLinkError.\r\n\
    \r\n\
    Woran liegt das?\r\n\
    \r\n\
    Gruß Stef"
- id: 87
  author: Stefan
  author_email: stefanbuhl@gmx.net
  author_url: ""
  date: 2008-05-28 14:29:47 +0000
  date_gmt: 2008-05-28 12:29:47 +0000
  content: "Das obige Problem ist gelöst. Habe jedoch ein weiteres :-)\r\n\
    \r\n\
    Folgende Methode soll um einen Parameter erweitert werden:\r\n\
    \r\n\
    env-&gt;CallVoidMethod(hookObj_kb, processKeyID_kb, (jboolean)TRUE, p-&gt;vkCode,g_kl);\r\n\
    \r\n\
    Neu:\r\n\
    env-&gt;CallVoidMethod(hookObj_kb, processKeyID_kb, (jboolean)TRUE, p-&gt;vkCode, p-&gt;flags, g_kl);\r\n\
    \r\n\
    Jedoch tritt dann bei der Ausführung immer eine ACCESS_VIOLATION Exception auf. Warum? Im Javacode wurde bei der Methode \"moveMouse\" der Parameter natürlich auch erweitert. \r\n\
    \r\n\
    Irgendjemand ne Idee?\r\n\
    \r\n\
    Gruß"
- id: 88
  author: Stefan
  author_email: stefanbuhl@gmx.net
  author_url: ""
  date: 2008-05-28 14:30:58 +0000
  date_gmt: 2008-05-28 12:30:58 +0000
  content: "Ups, meine natürlich die \"processKey\" - Methode"
- id: 91
  author: robo47
  author_email: robo47@robo47.net
  author_url: http://www.robo47.net
  date: 2008-06-13 09:24:33 +0000
  date_gmt: 2008-06-13 07:24:33 +0000
  content: "Hi,\r\n\
    also falls sich hier wieder was tut, würde ich mich auch über ne Info freuen, insbesondere das Unterbinden des durchreichens des Tastendrucks an das System würde mich interessieren."
- id: 283
  author: Timo
  author_email: timo@jims-stellwerk.de
  author_url: ""
  date: 2008-12-16 20:22:59 +0000
  date_gmt: 2008-12-16 18:22:59 +0000
  content: "hi jotschi\r\n\
    ich hab mir vor ner zeit mal deinen hook runtergeladen und für meine zwecke modifiziert. ich hatte bisher noch keine erfahrung mit JNI und C++...\r\n\
    wenn ich deine original dll benutze, dann stürzen meine programme bei einem tastendruck ab.\r\n\
    deswegen hab ich das in der cpp auskommentiert und die dll neukommentiert. allerdings muss ich die user32.lib extra mit in das projekt aufnehmen. problem ist nun: an meinem pc läuft es wunderbar, aber nicht an anderen\r\n\
    ich habe es auf dem pc meines bruders erneut kompiliert, dann ging es auch. nach deinstallieren von visiual express ging es nicht mehr.\r\n\
    wie kann es sein, dass deine dll so hervorragend (auch ohne SKD) läuft, ich aber beim kompilieren dateien hinzufügen muss und es nirgends sonst funktioniert?\r\n\
    ich hab wie gesagt leider keine ahnung von c++ (anfänger halt) und kann auch nicht mit gcc umgehen, dass du scheinbar verwendet hast...\r\n\
    würd mich freuen wenn du mir nen tipp geben kannst...\r\n\
    Timo"
- id: 284
  author: Timo
  author_email: timo@jims-stellwerk.de
  author_url: ""
  date: 2008-12-16 20:23:58 +0000
  date_gmt: 2008-12-16 18:23:58 +0000
  content: nicht "neukommentiert", neu kompiliert (freud...)
- id: 285
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.Jotschi.de
  date: 2008-12-16 20:47:48 +0000
  date_gmt: 2008-12-16 18:47:48 +0000
  content: "Klingt nach einer Abhänigkeit mit bestimmten DLL's. \r\n\
    Wie genau unterschieden sich die beiden Systeme?\r\n\
    \r\n\
    Ich denke ich werde das Example bald mal überarbeiten und dann direkt als Eclipse Project bereitzustellen. \r\n\
    \r\n\
    Gruß Jotschi"
- id: 301
  author: Umar
  author_email: forumarji@gmail.com
  author_url: ""
  date: 2009-02-28 17:06:52 +0000
  date_gmt: 2009-02-28 15:06:52 +0000
  content: |-
    Dear Jotschi,
    
    Your code is fine.
    
    I need global mouse click count. Could you please send me the code.
    
    The zip file link for download is not working.
    
    Please send me the code for global mouse click count.
    
    Thanks&amp;Regards
    Umar Mohammad
- id: 1332
  author: mike
  author_email: mike_fv@trash-mail.com
  author_url: ""
  date: 2009-08-21 19:27:20 +0000
  date_gmt: 2009-08-21 17:27:20 +0000
  content: "Hallo Jotschi,\r\n\
    \r\n\
    vielen Dank für deine Arbeit!\r\n\
    Ich habe mit Hilfe dieses Codes einen einfachen Bot für ein Flash-Spiel namens FarmVille programmiert.\r\n\
    Darf ich dieses Programm unter der GPL (v. 3) verteilen?"
- id: 1335
  author: Nao
  author_email: arved1990@gmx.de
  author_url: ""
  date: 2009-09-03 22:30:53 +0000
  date_gmt: 2009-09-03 20:30:53 +0000
  content: "ich habe das programm versucht zu starten aber es funktionirt nicht es wir ein fehler ausgegeben \r\n\
    Exception in thread \"Thread-0\" java.lang.UnsatisfiedLinkError: no SysHook.cpp in java.library.path\r\n\
    \tat java.lang.ClassLoader.loadLibrary(Unknown Source)\r\n\
    \tat java.lang.Runtime.loadLibrary0(Unknown Source)\r\n\
    \tat java.lang.System.loadLibrary(Unknown Source)\r\n\
    \tat SysHook.(SysHook.java:24)\r\n\
    \tat PoolHook.run(SysHook.java:13)\r\n\
    würde mich auf eine antwort freuen"
- id: 1367
  author: joan
  author_email: joan@web.de
  author_url: ""
  date: 2010-01-10 01:18:24 +0000
  date_gmt: 2010-01-09 23:18:24 +0000
  content: "Hallo Jotschi,\r\n\
    \r\n\
    könntest du die .dll noch für 64bit kompilieren, oder kommt dieser Fehler woanders her?\r\n\
    \r\n\
    Exception in thread \"Thread-0\" java.lang.UnsatisfiedLinkError: C:\\Wi\r\n\
    32\\SysHook.dll: Can't load IA 32-bit .dll on a AMD 64-bit platform\r\n\
    \r\n\
    \r\n\
    Grüße"
- id: 1369
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.jotschi.de
  date: 2010-01-10 12:57:07 +0000
  date_gmt: 2010-01-10 10:57:07 +0000
  content: "Hi,\r\n\
    \r\n\
    ich entwickle nicht mehr unter Windows daher wird es auch kein Update des Beispiels geben. Du musst nur die DLL neu compilieren schätze ich. \r\n\
    \r\n\
    Gruß\r\n\
    \r\n\
    Jotschi"
- id: 1370
  author: joan
  author_email: felixlaegeler@web.de
  author_url: ""
  date: 2010-01-10 14:07:03 +0000
  date_gmt: 2010-01-10 12:07:03 +0000
  content: "Hi, vielen Dank für die schnelle Antwort!\r\n\
    \r\n\
    Klingt jetzt eher peinlich, aber da ich noch nie mit C/C++ gearbeitet habe, wie geht das am schnellsten? .cpp und .h File hast du ja mitgeliefert. Reicht es, z.b. den Bloodshed Dev++ zu ziehen (da sind ja Compiler dabei), oder muss ich speziell einen 64bit Compiler verwenden?\r\n\
    \r\n\
    Danke, finde ich cool dass du nach über 2 Jahren immernoch antworten zum Projekt gibst."
- id: 1432
  author: jie
  author_email: chensjmail@163.com
  author_url: ""
  date: 2010-05-04 03:24:20 +0000
  date_gmt: 2010-05-04 01:24:20 +0000
  content: "Hello, because I do not know much C + +,\r\n\
    So have been looking for hotkey callback java example\r\n\
    You write very comprehensive, very happy.\r\n\
    But the examples you pack in my environment, I can run,\r\n\
    My compile-time with your SysHook.cpp encounter 'KBDLLHOOKSTRUCT': undeclared identifier problem\r\n\
    I am looking for some information on the Internet back to the # define _WIN32_WINNT 0 0500\r\n\
    Can be compiled by the, java call and successfully registered hot key, but hotkey callback method to LowLevelKeyboardProc\r\n\
    env-&gt; CallVoidMethod (hookObj_kb, processKeyID_kb, (jboolean) TRUE, p-&gt; vkCode, g_kl);\r\n\
    The rows collapsed, MouseTracker method is just a callback method when the collapse of java (I note the body of this method),\r\n\
    Would like to ask you a favor and take a look at where are my problem, thank you\r\n\
    My environment, win2003, java6, Chong-day Chinese version of vc + + 6\r\n\
    my email: chensjmail@163.com"
- id: 1821
  author: lars
  author_email: mr-pint@hotmail.de
  author_url: ""
  date: 2010-09-09 15:57:07 +0000
  date_gmt: 2010-09-09 13:57:07 +0000
  content: Wie Funktioniert das Ganze mit der Maus?
- id: 1907
  author: Lars Vogel
  author_email: Lars.Vogel@gmail.com
  author_url: http://www.vogella.de
  date: 2010-10-31 21:40:36 +0000
  date_gmt: 2010-10-31 19:40:36 +0000
  content: "Danke. Genau das habe ich gesucht.  Endlich mal global auf die Mouse hören. :-)"
- id: 1974
  author: Lukas
  author_email: darkangel05@gmx.at
  author_url: ""
  date: 2010-11-30 23:51:48 +0000
  date_gmt: 2010-11-30 21:51:48 +0000
  content: "Hi.\r\n\
    Das ist genau das was ich gesucht habe. Danke!\r\n\
    \r\n\
    Ich habe nur ein Problem mit dem Package:\r\n\
    \r\n\
    Zitat von Xlazarus:\r\n\
    also oben \"package at.name.name2;\" reinschreiben.\r\n\
    Dann das file mit javac compilieren.\r\n\
    Dann mit dem entstandenen .class File mit javah -jni SysHook die SysHook.h Header-Datei erstellen.\r\n\
    Wenn jetzt das File im Editor anschaut, merkt man, dass sich die natvie Methodennamen geändert haben (eben durch den package-namen).\r\n\
    Jetzt noch die Methodennamen im cpp anpassen, dll erstellen und fertig.\"\r\n\
    \r\n\
    Ist der Example-Code im Default-Package funktioniert alles wunderbar.\r\n\
    Wenn ich jetzt aber das gesamte Beispielprogramm in das Package \"KeyHook\" gebe funktioniert nichts mehr.\r\n\
    \r\n\
    Zitat Console-Output:\r\n\
    # A fatal error has been detected by the Java Runtime Environment:\r\n\
    #\r\n\
    #  Internal Error (safepoint.cpp:572), pid=6432, tid=7832\r\n\
    #  Error: Deadlock in safepoint code.  Should have called back to the VM before blocking.\r\n\
    \r\n\
    \r\n\
    Folgende Schritte habe ich gemacht um die DLL neu zu erstellen:\r\n\
    Neues Eclipse-Projekt, Package erstellt, alle 4 JAVA-Dateien vom Beispielcode hinzugefügt, kompiliert\r\n\
    javah -jni KeyHook.SysHook\r\n\
    .h-Datei austauschen, .cpp-Datei ändern (Methodennamen)\r\n\
    DLL mit wxDevcpp kompiliern\r\n\
    \r\n\
    Versionen:\r\n\
    Eclipse 3.6\r\n\
    Java: JDK 1.6.0 20\r\n\
    wxDevC++ 7.3.1.3\r\n\
    \r\n\
    Weiß jemand Rat?\r\n\
    Danke"
- id: 2602
  author: Paul
  author_email: addresswurst@web.de
  author_url: ""
  date: 2011-05-21 18:30:44 +0000
  date_gmt: 2011-05-21 16:30:44 +0000
  content: "Hallo Jotschi,\r\n\
    deine Quellcode hat mir sehr weitergeholfen, jedoch funktioniert der KeyReleasedbefehl nicht, auf den schon Günter aufmerksam gemacht hatte. Er hat geschrieben, dass er diesen behoben hätte.... Jetzt stellt sich jedoch für mich die Frage wie man das im Einzelnen behebt, denn ich habe zurzeit keine Ahnung wie ich das machen soll. \r\n\
    \r\n\
    Gruß Paul"
- id: 6444
  author: blackkettle
  author_email: rk19016@gmail.com
  author_url: ""
  date: 2012-08-22 04:47:45 +0000
  date_gmt: 2012-08-22 02:47:45 +0000
  content: |-
    Hello, Jotschi,
    
    Your work is great! However, your example is for the default package.
    
    I tried to rewrite your example so that it could be running in a specific package.
    
    I am so sorry that I met a problem. The JVM crashes when it begins running.
    
    I wish you could help me and give me a hand.
    
    Below is my code. Please point out what is wrong.
    
    Example.java
    [code=Java]
    package jni;
    
    public class Example  implements KeyboardEventListener {
    
        static GlobalEventListener gl;
    
        public static void main(String[] args) throws Exception  
        {
            Example inst = new Example();
            gl = new GlobalEventListener();
              gl.addKeyboardEventListener(inst);
        }
                
        public void GlobalKeyPressed( KeyboardEvent event )
        {
            
            System.out.println( "Key Pressed: " + event.getVirtualKeyCode() );
        }
    
        public void GlobalKeyReleased( KeyboardEvent event )
        {
            System.out.println( "Key Released: " + event.getVirtualKeyCode() );
        }
        
    }
    [/code]
- id: 6445
  author: blackkettle
  author_email: rk19016@gmail.com
  author_url: ""
  date: 2012-08-22 04:49:10 +0000
  date_gmt: 2012-08-22 02:49:10 +0000
  content: "Hello, Jotschi,\r\n\
    \r\n\
    Your work is great! However, your example is for the default package.\r\n\
    \r\n\
    I tried to rewrite your example so that it could be running in a specific package.\r\n\
    \r\n\
    I am so sorry that I met a problem. The JVM crashes when it begins running.\r\n\
    \r\n\
    I wish you could help me and give me a hand.\r\n\
    \r\n\
    Thank you very much"
- id: 6446
  author: blackkettle
  author_email: rk19016@gmail.com
  author_url: ""
  date: 2012-08-22 04:52:24 +0000
  date_gmt: 2012-08-22 02:52:24 +0000
  content: |-
    Hello, Jotschi,
    
    Your work is great! However, your example is for the default package.
    
    I tried to rewrite your example so that it could be running in a specific package.
    
    I am so sorry that I met a problem. The JVM crashes when it begins running.
    
    I wish you could help me and give me a hand.
    
    Below is my code. Please point out what is wrong.
    
    Example.java
    [code]
    package jni;
    
    public class Example implements KeyboardEventListener {
    
    static GlobalEventListener gl;
    
    public static void main(String[] args) throws Exception
    {
    Example inst = new Example();
    gl = new GlobalEventListener();
    gl.addKeyboardEventListener(inst);
    }
    
    public void GlobalKeyPressed( KeyboardEvent event )
    {
    
    System.out.println( "Key Pressed: " + event.getVirtualKeyCode() );
    }
    
    public void GlobalKeyReleased( KeyboardEvent event )
    {
    System.out.println( "Key Released: " + event.getVirtualKeyCode() );
    }
    
    }
    [/code]
    
    GlobalEventListener.java
    [code]
    package jni;
    
    public class GlobalEventListener
    {
        PoolHook pt;
        public GlobalEventListener()
        {
            pt = new PoolHook(this);
            pt.start();
                
        }
     
        protected javax.swing.event.EventListenerList listenerList = new javax.swing.event.EventListenerList();
         
        public void addKeyboardEventListener(KeyboardEventListener listener)
        {
            listenerList.add( KeyboardEventListener.class, listener );
        }
     
        public void removeKeyboardEventListener(KeyboardEventListener listener)
        {
            listenerList.remove( KeyboardEventListener.class, listener );
        }
        
        
        void keyPressed(KeyboardEvent event)
        {
            Object[] listeners = listenerList.getListenerList();
            for ( int i = 0; i &lt; listeners.length; i += 2 )
            {
                if ( listeners[ i ] == KeyboardEventListener.class )
                {
                    ( (KeyboardEventListener)listeners[i + 1] ).GlobalKeyPressed( event );
                }
            }
        }
     
        void keyReleased(KeyboardEvent event)
        {
            Object[] listeners = listenerList.getListenerList();
            for ( int i = 0; i &lt; listeners.length; i += 2 )
            {
                if ( listeners[ i ] == KeyboardEventListener.class )
                {
                    ( (KeyboardEventListener)listeners[i + 1] ).GlobalKeyReleased( event );
                }
            }
        }
        
        
    }
    [/code]
    
    KeyboardEventListener.java
    [code]
    package jni;
    
    import java.util.*;
     
    public interface KeyboardEventListener extends EventListener
    {
        public void GlobalKeyPressed( KeyboardEvent event );
        public void GlobalKeyReleased( KeyboardEvent event );
    }
    
    
    class KeyboardEvent extends EventObject
    {
        private static final long serialVersionUID = 2341653211621224652L;
        boolean ts, ap, ek;
        int vk;
     
        public KeyboardEvent( Object source, boolean ts, int vk, boolean ap, boolean ek )
        {
            super(source);
            this.ts = ts;
            this.vk = vk;
            this.ap = ap;
            this.ek = ek;
        }
     
        public boolean getTransitionState()
        {
            return ts;
        }
     
        public long getVirtualKeyCode()
        {
            return vk;
        }
     
        public boolean isAltPressed()
        {
            return ap;
        }
     
        public boolean isExtendedKey()
        {
            return ek;
        }
     
        public boolean equals( KeyboardEvent event )
        {
            if( event.getVirtualKeyCode() == vk )
            {
                if( event.isExtendedKey() == ek )
                {
                    if( event.isAltPressed() == ap )
                    {
                        return true;
                    }
                }
            }
            return false;
        }
    }
    [/code]
    
    
    SysHook.java
    [code]
    package jni;
    
    class PoolHook extends Thread
    {
        SysHook hook;
        GlobalEventListener g_gl;
        PoolHook(GlobalEventListener gl)
        {
            g_gl = gl;
        }
        
        
        public void run() 
        {
            hook = new SysHook();
            hook.registerHook(g_gl);
        }
        
    }
    
    class SysHook
    {
        
        static 
        {
            System.loadLibrary(&quot;SysHook&quot;);
        }
        
        void processKey(  boolean ts  ,int vk, GlobalEventListener gl) 
        {
            KeyboardEvent event = new KeyboardEvent( this, ts, vk,false, false );
            if(ts == true)
                gl.keyPressed(event);
            else if(ts == false)
                gl.keyReleased(event);
        }
        
        void mouseMoved(int cord_x, int cord_y, GlobalEventListener gl) 
        {
            //MouseEvent event = new MouseEvent( this, cord_x, cord_y);
            //gl.mouseMoved(event);
        }
    
        native void registerHook(GlobalEventListener gl);
        native void unRegisterHook();
    
        
    }
    [/code]
    
    
    jni_SysHook.h
    [code]
    /* DO NOT EDIT THIS FILE - it is machine generated */
    #include &quot;jni.h&quot;
    /* Header for class jni_SysHook */
    
    #ifndef _Included_jni_SysHook
    #define _Included_jni_SysHook
    #ifdef __cplusplus
    extern &quot;C&quot; {
    #endif
    /*
     * Class:     jni_SysHook
     * Method:    registerHook
     * Signature: (Ljni/GlobalEventListener;)V
     */
    JNIEXPORT void JNICALL Java_jni_SysHook_registerHook
      (JNIEnv *, jobject, jobject);
    
    /*
     * Class:     jni_SysHook
     * Method:    unRegisterHook
     * Signature: ()V
     */
    JNIEXPORT void JNICALL Java_jni_SysHook_unRegisterHook
      (JNIEnv *, jobject);
    
    #ifdef __cplusplus
    }
    #endif
    #endif
    [/code]
    
    SysHook.cpp
    [code]
    #include 
    #include 
    #include "SysHook.h"
    #include "jni_SysHook.h"
    #include "jni.h"
    
    #ifndef WINVER
    #define WINVER 0x0500
    #endif
    
    #ifndef _WIN32_WINNT
    #define _WIN32_WINNT 0x0500
    #endif
    
    #if (_WIN32_WINNT &gt;= 0x0400)
    #define WH_KEYBOARD_LL 13
    #define WH_MOUSE_LL 14
    #endif // (_WIN32_WINNT &gt;= 0x0400)
    
    typedef   struct   tagKBDLLHOOKSTRUCT   { 
             DWORD   vkCode;             //   virtual   key   code 
             DWORD   scanCode;         //   scan   code 
             DWORD   flags;               //   flags 
             DWORD   time;                 //   time   stamp   for   this   message 
             DWORD   dwExtraInfo;   //   extra   info   from   the   driver   or   keybd_event 
     }KBDLLHOOKSTRUCT,   FAR   *LPKBDLLHOOKSTRUCT,   *PKBDLLHOOKSTRUCT;
    
    HINSTANCE hInst = NULL;
    
    JavaVM * jvm = NULL;
    jobject hookObj_kb = NULL;
    jobject hookObj_ms = NULL;
    jobject g_kl = NULL;
    
    jmethodID processKeyID_kb = NULL;
    jmethodID processKeyID_ms = NULL;
    DWORD hookThreadId = 0;
    
    LONG g_mouseLocX = -1;    // x-location of mouse position
    LONG g_mouseLocY = -1;    // y-location of mouse position
    
    extern "C"
    BOOL APIENTRY DllMain(HINSTANCE _hInst, DWORD reason, LPVOID reserved)
    {
        switch (reason)
        {
        case DLL_PROCESS_ATTACH:
            printf("C++: DllMain - DLL_PROCESS_ATTACH.\n");
            hInst = _hInst;
            break;
        default:
            break;
        }
        
        return TRUE;
    }
    
    LRESULT CALLBACK MouseTracker(int nCode, WPARAM wParam, LPARAM lParam)
    {
        JNIEnv * env;
        KBDLLHOOKSTRUCT * p = (KBDLLHOOKSTRUCT *)lParam;
        
        if (jvm-&gt;AttachCurrentThread((void **)&amp;env, NULL) &gt;= 0)
        {
            
            if (nCode==HC_ACTION)
            {
                MOUSEHOOKSTRUCT* pStruct = (MOUSEHOOKSTRUCT*)lParam;
                if (pStruct-&gt;pt.x != g_mouseLocX || pStruct-&gt;pt.y != g_mouseLocY)
                {
                    env-&gt;CallVoidMethod(hookObj_ms, processKeyID_ms, (jint)pStruct-&gt;pt.x,(jint)pStruct-&gt;pt.y, g_kl);
                    g_mouseLocX = pStruct-&gt;pt.x;
                    g_mouseLocY = pStruct-&gt;pt.y;
                }
                
            }
            
        }
        else
        {
            printf("C++: LowLevelKeyboardProc - Error on the attach current thread.\n");
        }
        
        return CallNextHookEx(NULL, nCode, wParam, lParam);
    }
    
    LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)
    {
        JNIEnv * env;
        KBDLLHOOKSTRUCT * p = (KBDLLHOOKSTRUCT *)lParam;
        
        if(jvm-&gt;AttachCurrentThread((void **)&amp;env, NULL) &gt;= 0)
        {
            switch (wParam)
            {
            case WM_KEYDOWN:
            case WM_SYSKEYDOWN:
                env-&gt;CallVoidMethod(hookObj_kb, processKeyID_kb, (jboolean)TRUE, p-&gt;vkCode,g_kl);
                break;
            case WM_KEYUP:
            case WM_SYSKEYUP:
                env-&gt;CallVoidMethod(hookObj_kb, processKeyID_kb, (jboolean)FALSE, p-&gt;vkCode,g_kl);
                break;
            default:
                break;
            }
        }
        else
        {
            printf("C++: LowLevelKeyboardProc - Error on the attach current thread.\n");
        }
        
        return CallNextHookEx(NULL, nCode, wParam, lParam);
    }
    
    void MsgLoop()
    {
        MSG message;
        while (GetMessage(&amp;message, NULL, 0, 0))
        {
            TranslateMessage(&amp;message);
            DispatchMessage(&amp;message);
        }
    }
    
    JNIEXPORT void JNICALL Java_jni_SysHook_registerHook(JNIEnv * env, jobject obj,jobject kl)
    {
        HHOOK hookHandle_ms = SetWindowsHookEx(WH_MOUSE_LL, MouseTracker, hInst, 0);
        HHOOK hookHandle_kb = SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, hInst, 0);
        
        g_kl = kl;
        
        if (hookHandle_ms == NULL)
        {
            printf("C++: Java_SysHook_registerKeyHook - Hook failed!\n");
            return;
        }
        else
        {
            printf("C++: Java_SysHook_registerKeyHook - Hook successful\n");
        }
        
        if (hookHandle_kb == NULL)
        {
            printf("C++: Java_SysHook_registerKeyHook - Hook failed!\n");
            return;
        }
        else
        {
            printf("C++: Java_SysHook_registerKeyHook - Hook successful\n");
        }
        
        hookObj_kb = env-&gt;NewGlobalRef(obj);
        jclass cls_kb = env-&gt;GetObjectClass(hookObj_kb);
        processKeyID_kb = env-&gt;GetMethodID(cls_kb, "processKey", "(ZILGlobalEventListener;)V");
        
        hookObj_ms = env-&gt;NewGlobalRef(obj);
        jclass cls_ms = env-&gt;GetObjectClass(hookObj_ms);
        processKeyID_ms = env-&gt;GetMethodID(cls_ms, "mouseMoved", "(IILGlobalEventListener;)V");
        
        env-&gt;GetJavaVM(&amp;jvm);
        hookThreadId = GetCurrentThreadId();
        
        MsgLoop();
        
        if (!UnhookWindowsHookEx(hookHandle_kb))
        {
            printf("C++: Java_SysHook_registerKeyHook - Unhook failed\n");
        }
        else
        {
            printf("C++: Java_SysHook_registerKeyHook - Unhook successful\n");
        }
        
        if (!UnhookWindowsHookEx(hookHandle_ms))
        {
            printf("C++: Java_SysHook_registerKeyHook - Unhook failed\n");
        }
        else
        {
            printf("C++: Java_SysHook_registerKeyHook - Unhook successful\n");
        }
    }
    
    JNIEXPORT void JNICALL Java_jni_SysHook_unRegisterHook(JNIEnv *env, jobject object)
    {
        if (hookThreadId == 0)
            return;
        
        printf("C++: Java_SysHook_unRegisterKeyHook - call PostThreadMessage.\n");
        PostThreadMessage(hookThreadId, WM_QUIT, 0, 0L);
    }
    [/code]
- id: 6447
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.jotschi.de
  date: 2012-08-22 09:43:43 +0000
  date_gmt: 2012-08-22 07:43:43 +0000
  content: |-
    Hello blackkettle,
    
    please take a look at the linked post at the top of the page. The implementation was rewritten by Kristian Kraljic. 
    
    Greetings
    
    Jotschi
---
<h2>
UPDATE:
This code was written a long time ago and does not work with Windows Vista/7. 
Please check out a newer version which was rewritten by Kristian Kraljic.
</h2>
&gt;&gt; <a href="http://ksquared.de/blog/2011/07/java-global-system-hook/">Java Global (low level) Keyboard / Mouse Hook JNI</a> &lt;&lt;

<a id="more"></a><a id="more-90"></a>

Global Keyboard/Mouse Hook für Java Applikationen. Der Standart Keyboard Listener für Java Applikationen liefert leider keine Ergebnisse sobald die Applikation den Fokus verliert. Dies ist z.B. bei Minimierung eines Fensters der Fall. Um trotzdem jedoch Interaktionen von dem Benutzer abzufangen ist es notwendig auf JNI (Java Nativ Interface) zurückzugreifen und mittels externer Libary (DLL unter Windows) bereitzustellen.

Quellen: <a href="/downloads/keyhook/KeyHookSRC.zip" target="_blank">KeyHookSRC.zip</a>



Code Listing:

<strong>SysHook.cpp:</strong>
<pre class="syntax c">
#include &lt;windows.h&gt;
#include "SysHook.h"
#include &lt;jni.h&gt;

HINSTANCE hInst = NULL;

JavaVM * jvm = NULL;
jobject hookObj_kb = NULL;
jobject hookObj_ms = NULL;
jobject g_kl = NULL;

jmethodID processKeyID_kb = NULL;
jmethodID processKeyID_ms = NULL;
DWORD hookThreadId = 0;

LONG    g_mouseLocX = -1;    // x-location of mouse position
LONG    g_mouseLocY = -1;    // y-location of mouse position

extern "C"
BOOL APIENTRY DllMain(HINSTANCE _hInst, DWORD reason, LPVOID reserved)
{
	switch (reason)
	{
		case DLL_PROCESS_ATTACH:
			printf("C++: DllMain - DLL_PROCESS_ATTACH.\n");
			hInst = _hInst;
			break;
		default:
			break;
	}

return TRUE;
}

LRESULT CALLBACK MouseTracker(int nCode, WPARAM wParam, LPARAM lParam)
{
	JNIEnv * env;
	KBDLLHOOKSTRUCT * p = (KBDLLHOOKSTRUCT *)lParam;

	if (jvm-&gt;AttachCurrentThread((void **)&amp;env, NULL) &gt;= 0)
	{

		if (nCode==HC_ACTION)
		{
			MOUSEHOOKSTRUCT* pStruct = (MOUSEHOOKSTRUCT*)lParam;
			if (pStruct-&gt;pt.x != g_mouseLocX || pStruct-&gt;pt.y != g_mouseLocY)
			{
				env-&gt;CallVoidMethod(hookObj_ms, processKeyID_ms, (jint)pStruct-&gt;pt.x,(jint)pStruct-&gt;pt.y, g_kl);
				g_mouseLocX = pStruct-&gt;pt.x;
				g_mouseLocY = pStruct-&gt;pt.y;
			}

		}

	}
	else
	{
		printf("C++: LowLevelKeyboardProc - Error on the attach current thread.\n");
	}

return CallNextHookEx(NULL, nCode, wParam, lParam);
}

LRESULT CALLBACK LowLevelKeyboardProc(int nCode, WPARAM wParam, LPARAM lParam)
{
	JNIEnv * env;
	KBDLLHOOKSTRUCT * p = (KBDLLHOOKSTRUCT *)lParam;

	if (jvm-&gt;AttachCurrentThread((void **)&amp;env, NULL) &gt;= 0)
	{
		switch (wParam)
		{
			case WM_KEYDOWN:
			case WM_SYSKEYDOWN:
				env-&gt;CallVoidMethod(hookObj_kb, processKeyID_kb, (jboolean)TRUE, p-&gt;vkCode,g_kl);
				break;
			case WM_KEYUP:
			case WM_SYSKEYUP:
				env-&gt;CallVoidMethod(hookObj_kb, processKeyID_kb, (jboolean)FALSE, p-&gt;vkCode,g_kl);
				break;
			default:
				break;
		}
	}
	else
	{
		printf("C++: LowLevelKeyboardProc - Error on the attach current thread.\n");
	}

return CallNextHookEx(NULL, nCode, wParam, lParam);
}

void MsgLoop()
{
	MSG message;
	while (GetMessage(&amp;message, NULL, 0, 0))
{

TranslateMessage(&amp;message);
DispatchMessage(&amp;message);
}
}

JNIEXPORT void JNICALL Java_SysHook_registerHook(JNIEnv * env, jobject obj,jobject kl)
{
	HHOOK hookHandle_ms = SetWindowsHookEx(WH_MOUSE_LL, MouseTracker, hInst, 0);
	HHOOK hookHandle_kb = SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, hInst, 0);

	g_kl = kl;

	if (hookHandle_ms == NULL)
	{
		printf("C++: Java_SysHook_registerKeyHook - Hook failed!\n");
		return;
	}
	else
	{
		printf("C++: Java_SysHook_registerKeyHook - Hook successful\n");
	}

	if (hookHandle_kb == NULL)
	{
		printf("C++: Java_SysHook_registerKeyHook - Hook failed!\n");
		return;
	}
	else
	{
		printf("C++: Java_SysHook_registerKeyHook - Hook successful\n");
	}

	hookObj_kb = env-&gt;NewGlobalRef(obj);
	jclass cls_kb = env-&gt;GetObjectClass(hookObj_kb);
	processKeyID_kb = env-&gt;GetMethodID(cls_kb, "processKey", "(ZILGlobalEventListener;)V");

	hookObj_ms = env-&gt;NewGlobalRef(obj);
	jclass cls_ms = env-&gt;GetObjectClass(hookObj_ms);
	processKeyID_ms = env-&gt;GetMethodID(cls_ms, "mouseMoved", "(IILGlobalEventListener;)V");

	env-&gt;GetJavaVM(&amp;jvm);
	hookThreadId = GetCurrentThreadId();

	MsgLoop();

	if (!UnhookWindowsHookEx(hookHandle_kb))
	{
		printf("C++: Java_SysHook_registerKeyHook - Unhook failed\n");
	}
	else
	{
		printf("C++: Java_SysHook_registerKeyHook - Unhook successful\n");
	}

	if (!UnhookWindowsHookEx(hookHandle_ms))
	{
		printf("C++: Java_SysHook_registerKeyHook - Unhook failed\n");
	}
	else
	{
		printf("C++: Java_SysHook_registerKeyHook - Unhook successful\n");
	}
}

JNIEXPORT void JNICALL Java_SysHook_unRegisterHook(JNIEnv *env, jobject object)
{
	if (hookThreadId == 0)
	return;

	printf("C++: Java_SysHook_unRegisterKeyHook - call PostThreadMessage.\n");
	PostThreadMessage(hookThreadId, WM_QUIT, 0, 0L);
}
</pre>


<strong>SysHook.h:</strong>
<pre class="syntax c">
 /* DO NOT EDIT THIS FILE - it is machine generated */
#include &lt;jni.h&gt;
/* Header for class SysHook */

#ifndef _Included_SysHook
#define _Included_SysHook
#ifdef __cplusplus
extern "C" {
#endif
/*
* Class:     SysHook
* Method:    registerHook
* Signature: (LGlobalEventListener;)V
*/
JNIEXPORT void JNICALL Java_SysHook_registerHook  (JNIEnv *, jobject, jobject);

/*
* Class:     SysHook
* Method:    unRegisterHook
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_SysHook_unRegisterHook  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
</pre>

<strong>GlobalEventListener.java:</strong>
<pre class="syntax c">
public class GlobalEventListener
{
	PoolHook pt;
	public GlobalEventListener()
	{
		pt = new PoolHook(this);
		pt.start();
	}

	protected javax.swing.event.EventListenerList listenerList = new javax.swing.event.EventListenerList();

	public void addKeyboardEventListener(KeyboardEventListener listener)
	{
		listenerList.add( KeyboardEventListener.class, listener );
	}

	public void removeKeyboardEventListener(KeyboardEventListener listener)
	{
		listenerList.remove( KeyboardEventListener.class, listener );
	}

	void keyPressed(KeyboardEvent event)
	{
		Object[] listeners = listenerList.getListenerList();
		for ( int i = 0; i &lt; listeners.length; i += 2 )
		{
			if ( listeners[ i ] == KeyboardEventListener.class )
		{
		( (KeyboardEventListener)listeners[i + 1] ).GlobalKeyPressed( event );
	}
}
}

void keyReleased(KeyboardEvent event)
{
	Object[] listeners = listenerList.getListenerList();
	for ( int i = 0; i &lt; listeners.length; i += 2 )
	{
		if ( listeners[ i ] == KeyboardEventListener.class )
		{
			( (KeyboardEventListener)listeners[i + 1] ).GlobalKeyReleased( event );
		}
	}
}

}
</pre>

<strong>KeyboardEventListener.java:</strong>
<pre class="syntax java">
import java.util.*;

public interface KeyboardEventListener extends EventListener
{
	public void GlobalKeyPressed( KeyboardEvent event );
	public void GlobalKeyReleased( KeyboardEvent event );
}

class KeyboardEvent extends EventObject
{
	private static final long serialVersionUID = 2341653211621224652L;
	boolean ts, ap, ek;
	int vk;

public KeyboardEvent( Object source, boolean ts, int vk, boolean ap, boolean ek )
{
	super(source);
	this.ts = ts;
	this.vk = vk;
	this.ap = ap;
	this.ek = ek;
}

public boolean getTransitionState()
{
	return ts;
}

public long getVirtualKeyCode()
{
	return vk;
}

public boolean isAltPressed()
{
	return ap;
}

public boolean isExtendedKey()
{
	return ek;
}

public boolean equals( KeyboardEvent event )
{
	if( event.getVirtualKeyCode() == vk )
	{
		if( event.isExtendedKey() == ek )
		{
			if( event.isAltPressed() == ap )
			{
				return true;
			}
		}
	}
return false;
}
}
</pre>

<strong>SysHook.java:</strong>
<pre class="syntax c">
class PoolHook extends Thread
{
	SysHook hook;
	GlobalEventListener g_gl;

	PoolHook(GlobalEventListener gl)
	{
		g_gl = gl;
	}

	public void run()
	{
		hook = new SysHook();
		hook.registerHook(g_gl);
	}

}

class SysHook
{

	static
	{
		System.loadLibrary("SysHook");
	}

	void processKey(  boolean ts  ,int vk, GlobalEventListener gl)
	{
		KeyboardEvent event = new KeyboardEvent( this, ts, vk,false, false );
		gl.keyPressed(event);
	}

	void mouseMoved(int cord_x, int cord_y, GlobalEventListener gl)
	{
		//MouseEvent event = new MouseEvent( this, cord_x, cord_y);
		//gl.mouseMoved(event);
	}

	native void registerHook(GlobalEventListener gl);
	native void unRegisterHook();

}
</pre>


Example Java Program:
<pre class="syntax java">
public class Example  implements KeyboardEventListener
{

	static GlobalEventListener gl;

	public static void main(String[] args) throws Exception
	{
		Example inst = new Example();
		gl = new GlobalEventListener();
		gl.addKeyboardEventListener(inst);
	}

	public void GlobalKeyPressed( KeyboardEvent event )
	{
		System.out.println( "Key Pressed: " + event.getVirtualKeyCode() );
	}

	public void GlobalKeyReleased( KeyboardEvent event )
	{
		System.out.println( "Key Released: " + event.getVirtualKeyCode() );
	}

}
</pre>

--- 
layout: post
status: publish
published: true
title: Code Coverage with Emma and CruiseControl
author: Jotschi
author_login: Jotschi
author_email: webmaster@jotschi.de
author_url: http://www.jotschi.de
excerpt: |
  Perhaps you want to display your coverage reports generated by emma within your cruisecontrol installation.
  
  There are at least three different ways to get this done. I used cruisecontrol-bin-2.8.1 and the way described here.

wordpress_id: 210
wordpress_url: /?p=210
date: 2008-12-03 22:22:09 +00:00
categories: 
- Fundgrube
- Technik
tags: 
- java
- cruisecontrol
- emma
- ant
- xsl
comments: 
- id: 250
  author: Jeffrey Fredrick
  author_email: jfredrick@mac.com
  author_url: http://blog.jeffreyfredrick.com
  date: 2008-12-05 07:34:34 +0000
  date_gmt: 2008-12-05 05:34:34 +0000
  content: |-
    Nice writeup!
    
    Any interest in submitting your .xsl to the project?
- id: 251
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.jotschi.de
  date: 2008-12-05 10:27:19 +0000
  date_gmt: 2008-12-05 08:27:19 +0000
  content: In fact the xsl was included in the project some time ago i think. Just search the net for emma.xsl and cruisecontrol. I just had to put the pieces together.
- id: 258
  author: Jeffrey Fredrick
  author_email: jfredrick@mac.com
  author_url: http://the.ci-guys.com
  date: 2008-12-07 08:25:44 +0000
  date_gmt: 2008-12-07 06:25:44 +0000
  content: |-
    It isn't part of the CruiseControl project. At least it isn't in the repository that I can see:
    
    http://is.gd/ayo8
    
    Maybe part of CC.NET?
    
    Or was it from the wiki?
    
    http://is.gd/ayp3
- id: 259
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.Jotschi.de
  date: 2008-12-07 11:37:41 +0000
  date_gmt: 2008-12-07 09:37:41 +0000
  content: |-
    I fetched the emma.xsl from this site:
    https://trac.osmosoft.com/Aloha/browser/trunk/CruiseControl/webapps/cruisecontrol/xsl/emma.xsl?rev=21
- id: 631
  author: George Anderson
  author_email: geo_sbc@yahoo.com.br
  author_url: http://peaoconnection.blogspot.com
  date: 2009-04-24 20:36:32 +0000
  date_gmt: 2009-04-24 18:36:32 +0000
  content: |-
    Hey, nice write up, it worked in my project! Thank you!
    
    One nice to have though would be the package collapsing, to go deep in the classes and methods just the way we can do in the EMMA html result file.
    
    If had time I would do it myself...
    
    Thanks,
    George.
- id: 858
  author: Raghava
  author_email: ragsger@gmail.com
  author_url: ""
  date: 2009-05-26 15:41:13 +0000
  date_gmt: 2009-05-26 13:41:13 +0000
  content: I have similiar kind of requirement but its more specific. In my case cruisecontrol is making builds if it finds any commits in subversion and here I have to run the emma code coverage _only_ on the modified files as I am interested in the test coverage of changed files in this particular build. Have any ideas how to do this?
---
Perhaps you want to display your coverage reports generated by emma within your cruisecontrol installation.

There are at least three different ways to get this done. I used cruisecontrol-bin-2.8.1 and the way described here.
<a id="more"></a><a id="more-210"></a>
1. By using the artifactspublisher you can just store your html emma reports within your artifacts and display them inside of cruise control by using an iframe. More information about this way can be found here: <a href="http://markmail.org/message/oew5ope3jcdds5az">http://markmail.org/message/oew5ope3jcdds5az</a>
2. Using the method i describe within this post. It is similar to the way junit reports are included by using xsl.
3. Using EmmaArtifactWidget that ships with cc. I tried to find more information about this widget and how to use it but found none. Usage of widgets is badly documented within cc.

At first we have to add emma code coverage tasks to the default project called 'connectfour'.

{% snippet xml %}
<project name="connectfour" default="all">
    <target name="all" depends="clean, compile, sleep, test,emma.report, jar"/>

    <target name="clean">
        <delete dir="target" quiet="true" />
    </target>

    <property name="emma.dir" location="bin/emma" />
    <property name="emma.thresholds" value="class:100,method:100,block:100,line:100" />

    <path id="emma.lib">
      <pathelement location="lib/emma.jar" />
      <pathelement location="lib/emma_ant.jar" />
    </path>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib" />
   
    <target name="compile">
        <mkdir dir="target/classes"/>
        <javac srcdir="src" destdir="target/classes" debug="true" />
    </target>

    <target name="sleep">
        <echo message="Sleeping for a while so you can see the build in the new dashboard" />
        <sleep seconds="0" />
    </target>


   <target name="emma.instrument">
      <emma enabled="true">
	  <instr instrpath="target/classes" destdir="target/classes" metadatafile="target/test-results/metadata.emma" merge="true" mode="overwrite" />
      </emma>
   </target>

    <target name="emma.report">
      <emma enabled="true">
        <report sourcepath="src" sort="+name" metrics="method:83,block:83,line:74,class:88">
        <fileset dir="target/test-results/">
          <include name="*.emma" />
          <include name="*.ec" />
        </fileset>

        <xml outfile="target/test-results/coverage.xml" depth="method" />
        <html outfile="target/test-results/index.html" depth="method" columns="name,class,method,block,line" />
      </report>
      </emma>
    </target>

    <target name="test" depends="compile,emma.instrument">
        <mkdir dir="target/test-classes"/>
        <javac srcdir="test" destdir="target/test-classes">
            <classpath>
                <pathelement location="target/classes"/>
                <pathelement location="lib/junit.jar"/>
            </classpath>
        </javac>

        <mkdir dir="target/test-results"/>

        <junit haltonfailure="no" fork="yes" printsummary="on">
            <classpath >
                <pathelement location="target/classes"/>
                <pathelement location="lib/junit.jar"/>
                <path refid="emma.lib" />
                <pathelement location="target/test-classes"/>
            </classpath>

            <jvmarg value="-Demma.coverage.out.file=target/test-results/coverage.emma" />
	    <jvmarg value="-Demma.coverage.out.merge=true" />
            
            <formatter type="brief" usefile="false"/>
            <formatter type="xml" />
            <batchtest todir="target/test-results" >
                <fileset dir="target/test-classes" includes="**/*Test.class"/>
            </batchtest>
        </junit>

    </target>

    <target name="jar" depends="compile">
        <jar jarfile="target/connectfour.jar" basedir="target/classes"/>
    </target>
</project>
{% endsnippet %}


You will have to change the CruiseControl project configuration. The schedule section should look like this:
{% snippet xml %}
 <schedule interval="300">
            <ant anthome="apache-ant-1.7.0" buildfile="build.xml" antWorkingDir="projects/${project.name}"  />
 </schedule>
{% endsnippet %}


My full <strong>config.xml</strong>:
{% snippet xml %}
<cruisecontrol>
    <project name="connectfour">

        <listeners>
            <currentbuildstatuslistener file="logs/${project.name}/status.txt"/>
        </listeners>

        <bootstrappers>
            <antbootstrapper anthome="apache-ant-1.7.0" buildfile="projects/${project.name}/build.xml" target="clean" />
        </bootstrappers>

        <modificationset quietperiod="30">
            <!-- touch any file in connectfour project to trigger a build -->
            <filesystem folder="projects/${project.name}"/>
        </modificationset>

        <schedule interval="300">
            <ant anthome="apache-ant-1.7.0" buildfile="build.xml" antWorkingDir="projects/${project.name}"  />
        </schedule>

        <log>
            <merge dir="projects/${project.name}/target/test-results"/>
        </log>

        <publishers>
            <onsuccess>
                <artifactspublisher dest="artifacts/${project.name}" file="projects/${project.name}/target/${project.name}.jar"/>
            </onsuccess>
        </publishers>

    </project>
</cruisecontrol>
{% endsnippet %}

Add the following section below for example your testresults tab in <strong>cruisecontrol-bin-2.8.1/webapps/cruisecontrol/main.jsp</strong>
{% snippet xml %}
         <cruisecontrol:tab name="emmaResults" label="Emma Results" >
             <%@ include file="emmadetails.jsp" %>
          </cruisecontrol:tab>
{% endsnippet %}

Add a new file called <strong>emmadetails.jsp</strong> in <strong>cruisecontrol-bin-2.8.1/webapps/cruisecontrol/</strong>
{% snippet jsp %}
<%@ taglib uri="/WEB-INF/cruisecontrol-jsp11.tld" prefix="cruisecontrol"%>

<cruisecontrol:xsl xslFile="/xsl/emma.xsl"/>
{% endsnippet %}

Add a new xsl file that will parse your CruiseControl xml build log called <strong>emma.xsl</strong> in <strong>cruisecontrol-bin-2.8.1/webapps/cruisecontrol/xsl/</strong> :
{% snippet xml %}
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:fo="http://www.w3.org/1999/XSL/Format">
	<xsl:output method="html"/>

	<xsl:template match="/" mode="emma">
		<xsl:if test="count(/cruisecontrol/report/data/all/package) &gt; 0">
			<table align="center" cellpadding="2" cellspacing="0" border="0" width="98%">
				<tbody>
					<tr>
						<th class="checkstyle-sectionheader" colspan="5" align="left">Emma Results</th>
					</tr>
					<tr>
						<td class="checkstyle-sectionheader">Package</td>
						<td class="checkstyle-sectionheader">Class Coverage</td>
						<td class="checkstyle-sectionheader">Method Coverage</td>
						<td class="checkstyle-sectionheader">Block Coverage</td>
						<td class="checkstyle-sectionheader">Line Coverage</td>
					</tr>
					<xsl:for-each select="/cruisecontrol/report/data/all/package">
						<xsl:sort select="@name"/>
						<tr>
							<xsl:if test="position() mod 2 = 1">
								<xsl:attribute name="class">checkstyle-oddrow</xsl:attribute>
							</xsl:if>
							<td><xsl:value-of select="@name"/></td>
								<xsl:for-each select="coverage">
								<td>
									<xsl:value-of select="@value"/>	
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</xsl:if>
	</xsl:template>
	
	<xsl:template match="/">
        <xsl:apply-templates select="." mode="emma"/>
    </xsl:template>
</xsl:stylesheet>
{% endsnippet %}

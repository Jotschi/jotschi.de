<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jotschi&#39;s Blog</title>
    <link>http://jotschi.de/post/</link>
    <description>Recent content in Posts on Jotschi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Aug 2015 18:00:00 +0000</lastBuildDate>
    <atom:link href="http://jotschi.de/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SVP with Wine on Linux</title>
      <link>http://jotschi.de/2015/08/12/svp-wine-linux</link>
      <pubDate>Wed, 12 Aug 2015 18:00:00 +0000</pubDate>
      
      <guid>http://jotschi.de/2015/08/12/svp-wine-linux</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_requirements&#34;&gt;Requirements:&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Wine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;avconv&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;libx264&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The installed tools and plugins below&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_install_svp_using_wine&#34;&gt;Install SVP using wine&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Download and install &#34;SVP&#34;:http://www.svp-team.com/wiki/Download
Don&amp;#8217;t install MPC or SVPTube. We&amp;#8217;ll not need those tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wine SVP_3.1.7.exe&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For some reason the installation process has not updated the system32 lib. We need to overwrite the dll with the one that was provided by SVP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;cp ~/.wine/drive_c/Program Files/SVP/Resources/Avisynth/avisynth.dll ~/.wine/drive_c/windows/system32&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_download_a_href_http_akuvian_org_src_avisynth_avs2yuv_avs2yuv_exe_a&#34;&gt;Download &lt;a href=&#34;http://akuvian.org/src/avisynth/avs2yuv/&#34;&gt;avs2yuv.exe&lt;/a&gt;&lt;/h3&gt;

&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_download_the_a_href_https_github_com_ffms_ffms2_releases_ffms2_plugin_a_for_avisynth_from_github&#34;&gt;Download the &lt;a href=&#34;https://github.com/FFMS/ffms2/releases&#34;&gt;ffms2 plugin&lt;/a&gt; for avisynth from github.&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I used ffms2-2.21-icl.7z and extract the ffms2.dll that matches your architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_download_the_svp_mvtools&#34;&gt;Download the SVP MVTools&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I used the &lt;a href=&#34;http://www.svp-team.com/wiki/Plugins:_MVTools2#Downloads&#34;&gt;mvtools-2.5.11.9-svp tools&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We&amp;#8217;ll need the following DLL files from that archiv:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;libflowsse.dll&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mvtools2.dll&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Place all the mentioned dll&amp;#8217;s in one folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The folder should now contain:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;libflowsse.dll&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mvtools2.dll&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;avs2yuv.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ffms2.dll&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Create a avs script called script.avs which has this content:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;SetMemoryMax(1024)

pel=2
recalc=true

svp_flow_lib=&#34;libflowsse.dll&#34;
LoadPlugin(&#34;ffms2.dll&#34;)
LoadPlugin(&#34;mvtools2.dll&#34;)

SetMTMode(3,10)

FFVideoSource(&#34;YOUR_VIDEO.mkv&#34;).ConvertToYV12()

SetMTMode(2)

super=MSuper(pel=pel)
finest=pel==1 ? super : MFinest(super)

backward_vec=MAnalyse(super, isb=true, blksize=16, overlap=4)
forward_vec=MAnalyse(super, isb=false, blksize=16, overlap=4)

# I don&#39;t know why but these lines are not working for me. My avisync can&#39;t parse those lines and aborts
#backward_vec = recalc == 0 ? backward_vec : MRecalculate(super, backward_vec, blksize=8, overlap=2)
#forward_vec  = recalc == 0 ? forward_vec  : MRecalculate(super, forward_vec, blksize=8, overlap=2)

MSmoothFps(super, backward_vec, forward_vec, finest=finest, num=60, den=1, algo=13, sadml=200, blend=false)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Update the placeholder in the script and trigger the processing using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wine avs2yuv script.avs - | avconv -i - -c:v libx264 -crf 20 -tune film -preset slow -y output.mp4 -f yuv4mpegpipe&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The smoothed video will directly be encoded using libx264 and the result will be written to output.mp4. This process only works for the video and you would need to muxin the sound after this process.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Graph Database Java OGM Comparison</title>
      <link>http://jotschi.de/2015/06/10/graphdb-ogm-comparison/</link>
      <pubDate>Wed, 10 Jun 2015 18:00:00 +0000</pubDate>
      
      <guid>http://jotschi.de/2015/06/10/graphdb-ogm-comparison/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have been using graph databases for a while (mostly Neo4j) and i thought it might be a good idea to write down some of the things i noted while using &lt;a href=&#34;http://neo4j.com/&#34;&gt;Neo4j&lt;/a&gt; in combination with &lt;a href=&#34;http://projects.spring.io/spring-data-neo4j/&#34;&gt;Spring Data Neo4j (SDN)&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I also compiled a comparison of various graph databases a while ago. My list only includes Java based graph databases that allow embedding. I won&amp;#8217;t go into details about the feature sets and how those differ between each of those databases. Instead i just point out the most important aspects i noticed while using the OGM&amp;#8217;s and graph databases.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;_graph_databases&#34; class=&#34;sect0&#34;&gt;Graph Databases&lt;/h1&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_neo4j&#34;&gt;Neo4j&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://neo4j.com/&#34;&gt;Neo4j&lt;/a&gt; was the first graph database i have ever used. It is &lt;a href=&#34;https://github.com/neo4j&#34;&gt;open source&lt;/a&gt; and very fast. It also ships directly with a neat little admin ui which can be used to visualize your graph data.
The database is very easy to embed and comes with a powerful query language (cypher). I don&amp;#8217;t know whether there are any other dedicated OGM/ORM layers for Neo4j besides of SDN and blueprint based OGMs.
The licensing on the other hand is not very useful once you decide to embed Neo4j in your application.
Neo4j Community Edition is licensed under GPL. MySQL is also licensed under GPL.
This means when you would not embed the database and only use the provided Neo4j REST API you would not need to license your application under GPL.
Once you embed the database in your application you must license your application under GPL. This gets even worse when you decide to utilize the clustering features. In this case you would need to license your application under AGPL (even if you would use Neo4j though the REST API)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The High Availability mode (Master/Slave Replication) can also be used when embedding the database. I wrote a &lt;a href=&#34;https://github.com/Jotschi/neo4j-ha-example&#34;&gt;dummy project&lt;/a&gt; a while ago that contains a working example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_orientdb&#34;&gt;OrientDB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://orientdb.com/&#34;&gt;OrientDB&lt;/a&gt; is also open source. There is no cypher but you can use Orient SQL. Embedding is also very easy and the licensing with Apache 2 license is very developer friendly. Tinkerpop support is very good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The blueprint API is the nativ API for orientdb. This means no additional blueprint API implementation is needed when using a blueprint based OGM.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_sparsity_sparksee&#34;&gt;Sparsity Sparksee&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have never used &#34;Sparsity Sparksee&#34;:http://www.sparsity-technologies.com/ but feature wise it is comparable to the other big graph databases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_titan_db&#34;&gt;Titan DB&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://thinkaurelius.github.io/titan/&#34;&gt;Titan DB&lt;/a&gt; is an interesting database. The storage layer for this graph database is interchangeable. You can use &lt;a href=&#34;http://en.wikipedia.org/wiki/Berkeley_DB&#34;&gt;Berkeley DB&lt;/a&gt; which is quiet fast but it basically limits the size of nodes you can store and you can&amp;#8217;t use clustering.
Alternatively you can also use &lt;a href=&#34;http://cassandra.apache.org/&#34;&gt;Cassandra&lt;/a&gt;. Cassandra is slower compared to BerkeleyDB but it supports replication.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_hypergraphdb&#34;&gt;Hypergraphdb&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have never used this database and can&amp;#8217;t say much about it but my impression is that it is very small and the feature set is limited.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;_performance_comparison&#34; class=&#34;sect0&#34;&gt;Performance comparison&lt;/h1&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The performance comparision is very superficial and you should keep in mind that the usecase for the database should always dictate the choice.
I have just compared low level read and write speed because i was interested in those. The benchmark does not cover any kind of graph traversals. I was merely interessted in the speed it takes each database to output a single node.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;All tests were executed within in a JVM that also excuted the graph database. I created 10k nodes and read those 10k nodes sequentially and in random order. No warmup phase was added.
As a baseline i choose Neo4j because it got the overall best performance. (less % is better)&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&#34;tableblock frame-all grid-all spread&#34;&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 25%;&#34;&gt;
&lt;col style=&#34;width: 25%;&#34;&gt;
&lt;col style=&#34;width: 25%;&#34;&gt;
&lt;col style=&#34;width: 25%;&#34;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;DB&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;write 10k&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;read 10k seq&lt;/th&gt;
&lt;th class=&#34;tableblock halign-left valign-top&#34;&gt;read 10k random&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Neo4j&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;100%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;100%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;100%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;OrientDB&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;171%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;101%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;104%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Titan DB (Cassandra)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;314%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;502%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;510%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;Titan DB (BerkeleyDB)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;200%&lt;/p&gt;&lt;/td&gt;
&lt;td class=&#34;tableblock halign-left valign-top&#34;&gt;&lt;p class=&#34;tableblock&#34;&gt;205%&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;_ogm_object_graph_mapping&#34; class=&#34;sect0&#34;&gt;OGM - Object Graph Mapping&lt;/h1&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I created a &lt;a href=&#34;https://github.com/Jotschi/graph-ogm-examples&#34;&gt;github project&lt;/a&gt; that contains examples for all mentioned OGM&amp;#8217;s and graph databases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_spring_data_neo4j&#34;&gt;Spring Data Neo4j&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I have used SDN a lot and i&amp;#8217;m quiet impressed by it. Getting started is quiet easy and there are a lot of examples out there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;SDN uses annotations to map the entities and relationships. Inheritance of objects is directly mapped to the labels of a node. It is possible to create Spring Data Repositories that retrieve objects by using property values or by specifying cypher statements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What i like is the paging cypher support. What i do not like is the amount of classes and interfaces you need to create to interface with your objects but i guess this is always application specific.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When mentioning SDN it is important to note the differences between the versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_3_3_x&#34;&gt;3.3.x&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Jotschi/graph-ogm-examples/tree/master/spring-data-neo4j-3.x&#34;&gt;Example project&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Example usecase:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;User.java - Defines the entity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UserRepository.java - Defines the SDN user repository&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UserRepositoryImpl.java - Defines a SDN repository implementation that may contain custom repository method implementations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UserActions.java - Interface that contains the methods (is extended by UserRepository and implemented by UserRepositoryImpl)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UserService      - Defines methods that the implementation may use to manipulate user objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UserServiceImpl  - Implements the defined methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Another point that caused a lot of trouble for me was the @Fetch annotation. The getGroups() method would load the full entities (groups) when adding the @Fetch annotation to the method. This could cause to infinitive recursions or huge loading times. At the end i removed nearly all @Fetch annotations from my projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Instead i used the &lt;a href=&#34;http://docs.spring.io/autorepo/docs/spring-data-neo4j/current/api/org/springframework/data/neo4j/support/Neo4jTemplate.html&#34;&gt;Neo4jTemplate&lt;/a&gt; class in order to populate the returned enitity. When no @Fetch was specified only a shallow object with no properties is returned. Using the neo4jTemplate.fetch() this shallow object could be loaded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additionally SDN 3.x was/is slow as hell when using a remote Neo4j instead of the embedded one. This is another reason why SDN 4.x was developed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;@NodeEntity
public class User extends AbstractPersistable {

	private String lastname;

	private String firstname;

	@Indexed(unique = true)
	private String username;

  @RelatedTo(type = &#34;MEMBER_OF&#34;, direction = Direction.OUTGOING, elementClass = Group.class)
	private Set&amp;lt;Group&amp;gt; groups = new HashSet&amp;lt;&amp;gt;();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_4_x&#34;&gt;4.x&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Jotschi/graph-ogm-examples/tree/master/spring-data-neo4j-4.x&#34;&gt;Example project&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;SDN 4.x is still in development and is currently not using the Neo4j Core API directly. Instead it relies on the Neo4j REST API. The overall performance for remote connected neo4j servers is faster (compared to SDN 3.3 in remote mode).
I can only guess why Neo4j/Pivotal Software choose this approach but my guess is that they started a rewrite of SDN in preparation for the binary protocol support for neo4j and to speedup SDN when using a remote Neo4j.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.spring.io/spring-data/neo4j/docs/4.0.0.M1/reference/html/&#34;&gt;Documentation 4.0.0.M1&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_tinkerpop&#34;&gt;Tinkerpop&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://tinkerpop.incubator.apache.org/&#34;&gt;Tinkerpop&lt;/a&gt; is a collection of APIs that allow transparent and easy interfacing with graph databases. The blueprint API is the most low level api which is used to wrap the graph databases native API. By doing so it provides a standarized API which other APIs can use to interface with a graph db through this API layer. The API layer is very thin. There are various wrappers for many graph databases. I have used the &lt;a href=&#34;https://github.com/tinkerpop/blueprints/tree/master/blueprints-neo4j2-graph&#34;&gt;blueprint neo4j implementation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Tinkerpop Blueprint is generally a good choice when you want to develop your application but you are not yet sure what graph database you will use at the end.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There are three OGM&amp;#8217;s that are based upon the blueprint API i have looked at.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/freemo/Ferma-benchmark&#34;&gt;Ferma Benchmark&lt;/a&gt; contains measurements for Frames, Totorom and Ferma.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_tinkerpop_2_frames&#34;&gt;Tinkerpop 2 - Frames&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Jotschi/graph-ogm-examples/tree/master/frames&#34;&gt;Example project&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The Frames API uses annotations similar to SDN and thus switching from SDN to Frames is not that hard. Indices have to be created separately. Tinkerpop does not support cypher. You would need to write your &lt;a href=&#34;http://sql2gremlin.com/&#34;&gt;statements in gremlin&lt;/a&gt; instead. The project seems not very active and Frames will not be part of Tinkerpop 3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public interface User extends AbstractPersistable {

        @Property(&#34;firstname&#34;)
        public String getFirstname();

        @Property(&#34;firstname&#34;)
        public void setFirstname(String name);

        @Property(&#34;lastname&#34;)
        public String getLastname();

        @Property(&#34;lastname&#34;)
        public void setLastname(String name);

        @Property(&#34;username&#34;)
        public String getUsername();

        @Property(&#34;username&#34;)
        public void setUsername(String name);

        @Adjacency(label = &#34;HAS_USER&#34;, direction = Direction.OUT)
        public Iterable&amp;lt;Group&amp;gt; getGroups();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_tinkerpop_totorom&#34;&gt;Tinkerpop - Totorom&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Jotschi/graph-ogm-examples/tree/master/totorom&#34;&gt;Example project&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I guess &lt;a href=&#34;https://github.com/BrynCooke/totorom&#34;&gt;Totorom&lt;/a&gt; could be seen as a successor to Frames. It is faster compared to Frames and it nativly interfaces with the tinkerpop gremlin query API.
The whole OGM is also very small. Many (all?) annotations are gone. Instead of interfaces you write classes which make things a lot easier compared to frames. In frames custom method handlers would need a special annotation (@JavaHandler) and a dedicated handler implementation for the method. With Totorom you just add your custom method.
Unfortunately the project itself is not very active (as for 06/2015).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public class User extends AbstractPersistable {

        public static String FIRSTNAME_KEY = &#34;firstname&#34;;

        public static String LASTNAME_KEY = &#34;lastname&#34;;

        public static String USERNAME_KEY = &#34;username&#34;;

        public String getFirstname() {
                return getProperty(FIRSTNAME_KEY);
        }

        public void setFirstname(String name) {
                setProperty(FIRSTNAME_KEY, name);
        }

        public String getLastname() {
                return getProperty(LASTNAME_KEY);
        }

        public void setLastname(String name) {
                setProperty(LASTNAME_KEY, name);
        }

        public String getUsername() {
                return getProperty(USERNAME_KEY);
        }

        public void setUsername(String name) {
                setProperty(USERNAME_KEY, name);
        }

        public List&amp;lt;Group&amp;gt; getGroups() {
                return out(&#34;HAS_USER&#34;).toList(Group.class);
        }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_ferma&#34;&gt;Ferma&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&#34;Example projects&#34;:https://github.com/Jotschi/graph-ogm-examples/tree/master/ferma&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The API of &#34;Ferma&#34;:https://github.com/Syncleus/Ferma is very similar to Totorom. Ferma has various operation modes. It also supports the Frames annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;What i found useful:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ferma is exposing the raw graph API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The project is active as of 06/2015&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;http://wiki.syncleus.com/index.php/Ferma&#34;&gt;documentation&lt;/a&gt; is quite good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The API contains useful method that can improve performance or prevent boilerplate code (e.g: toListExplicit, nextExplicit, nextOrDefault)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;public class User extends AbstractPersistable {

        public static String FIRSTNAME_KEY = &#34;firstname&#34;;

        public static String LASTNAME_KEY = &#34;lastname&#34;;

        public static String USERNAME_KEY = &#34;username&#34;;

        public String getFirstname() {
                return getProperty(FIRSTNAME_KEY);
        }

        public void setFirstname(String name) {
                setProperty(FIRSTNAME_KEY, name);
        }

        public String getLastname() {
                return getProperty(LASTNAME_KEY);
        }

        public void setLastname(String name) {
                setProperty(LASTNAME_KEY, name);
        }

        public String getUsername() {
                return getProperty(USERNAME_KEY);
        }

        public void setUsername(String name) {
                setProperty(USERNAME_KEY, name);
        }

        public List&amp;lt;Group&amp;gt; getGroups() {
                return out(&#34;HAS_USER&#34;).toList(Group.class);
        }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Temporary Server Portforward</title>
      <link>http://jotschi.de/2015/05/27/portforward-to-another-webserver/</link>
      <pubDate>Wed, 27 May 2015 21:30:26 +0000</pubDate>
      
      <guid>http://jotschi.de/2015/05/27/portforward-to-another-webserver/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sometimes it is useful to redirect all tcp traffic to port 80 from one server to another. This can be important when you decide to change your DNS entries from one server to another and you don&amp;#8217;t want to leave the old webserver server running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
  iptables -F
  iptables -t nat -F
  iptables -X
  iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination SOURCE_IP:80
  iptables -t nat -A POSTROUTING -p tcp -d SOURCE_IP --dport 80 -j SNAT --to-source DESTINATIONIP
  iptables -t nat -A POSTROUTING -j MASQUERADE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>GlusterFS / Async Writes</title>
      <link>http://jotschi.de/2015/05/27/glusterfs-async-write/</link>
      <pubDate>Wed, 27 May 2015 20:30:26 +0000</pubDate>
      
      <guid>http://jotschi.de/2015/05/27/glusterfs-async-write/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Over the weekend i decided to experiment and setup a glusterfs between my root server(plexus) and my fileserver at home(hydra).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I won&amp;#8217;t describe how to setup glustefs. There are various good guides &#34;available&#34;:http://www.gluster.org/community/documentation/index.php/QuickStart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  gluster volume create gv0 replica 2 hydra:/opt/gfs/brick1/gv0 plexus:/gfs/brick1/gv0
  gluster volume set gv0 network.ping-timeout 5
  gluster volume start gv0

  root@plexus:/gfs# mount -t glusterfs localhost:/gv0 gv0/
  root@hydra:/gfs# mount -t glusterfs localhost:/gv0 gv0/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At first glance i hoped that small writes would be cached and asynchronously flushed to the filesystem. I tried to increase the performance.cache-size and performance.write-behind-window-size option but did not succeed in increasing the write performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As you can see the write performance is basically predetermined by my max upload speed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  # Write 1MB
  root@hydra:/gfs/gv0# dd if=/dev/zero  of=testfile bs=1K count=1024
  1024+0 records in
  1024+0 records out
  1048576 bytes (1.0 MB) copied, 3.36612 s, 312 kB/s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;But luckily there are branching filesystems like &#34;unionfs&#34;:http://en.wikipedia.org/wiki/UnionFS that is for example used for live CDs. Such filesystems work in that way that they overlay multiple filesystems into a single virtual one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I created a new gv0-writecache folder which can be written to. The follow command creates a unionfs filesystem that is mounted to the /gv0/union folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  mkdir -p /gfs/union
  unionfs-fuse  -o default_permissions -o allow_other /gfs/gv0-writecache=RW:/gfs/gv0=RO /gfs/union/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Succeeding writes to the union folder are now very fast and the files are stored within the /gfs/gv0-writecache folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  root@hydra:/gfs/union# dd if=/dev/zero of=test2 bs=1M count=10
  10+0 records in
  10+0 records out
  10485760 bytes (10 MB) copied, 0.0454509 s, 231 MB/s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;After that step we only need to make sure to sync those files from the writecache to the glusterfs mount.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  root@hydra:/gfs/gv0-writecache# rsync  --remove-source-files -av /gfs/gv0-writecache/* /gfs/gv0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I also tried to use aufs instead of unionfs-fuse but i got various strange errors.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Resizing raid5 with mdadm, lvm and luks for encryption on debian wheezy</title>
      <link>http://jotschi.de/2014/02/09/lvm-mdadm-resizing-debian-wheezy/</link>
      <pubDate>Sun, 09 Feb 2014 15:31:26 +0000</pubDate>
      
      <guid>http://jotschi.de/2014/02/09/lvm-mdadm-resizing-debian-wheezy/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This guide will show you how to setup a simple mdadm, lvm test environment in which you can experiment with changes you want to execute on a real disk system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_setup_the_test_environment&#34;&gt;Setup the test environment&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can of course use your own disks. In my case i did a trial run of the needed steps by using losetup to map a data file to a loop device.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  dd if=/dev/zero of=diska bs=1M count=300
  dd if=/dev/zero of=diskb bs=1M count=300
  dd if=/dev/zero of=diskc bs=1M count=300
  dd if=/dev/zero of=diskd bs=1M count=300
  losetup /dev/loop0 diska
  losetup /dev/loop1 diskb
  losetup /dev/loop2 diskc
  losetup /dev/loop3 diskd

  # Create raid 5 with one disk missing
  mdadm -Cv /dev/md2 -l5 -n3 /dev/loop0 /dev/loop1 missing

  # Add luks cryptolayer ontop
  cryptsetup luksFormat /dev/md2
  cryptsetup luksOpen /dev/md2 cryptotest

  # Add lvm structure
  pvcreate /dev/mapper/cryptotest
  vgcreate testvg /dev/mapper/cryptotest
  lvcreate -l 100%FREE -n testlv testvg

  # Create filesystem
  mkfs.ext3  /dev/mapper/testvg-testlv
  mount /dev/mapper/testvg-testlv test/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can now copy your data onto the raid 5 and when done add the missing disk to the final raid. You can of course use three disks from the start.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_add_missing_disk_to_the_raid_5&#34;&gt;Add missing disk to the raid 5&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  # Add missing device
  mdadm --add /dev/md2 /dev/loop2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_growing_the_raid_5_by_adding_a_forth_disk&#34;&gt;Growing the raid 5 by adding a forth disk&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once your data has been copied you may want to add the now free disk to the raid of md2.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  # Add disk and resize md2
  mdadm --add /dev/md2 /dev/loop3
  mdadm --grow --raid-devices=4 /dev/md2

  # Check the sync process and the final result
  cat /proc/mdstat
  mdadm --detail /dev/md2
  umount /tmp/test/test

  # Resize the crypt layer and check the result
  cryptsetup resize cryptotest
  fdisk -l /dev/mapper/cryptotest

  # Resize physical volume and check the result
  pvresize /dev/mapper/cryptotest
  pvdisplay

  # Resize logical volume and check result
  lvextend -l +100%FREE /dev/mapper/testvg-testlv
  lvdisplay

  # Resize filesystem
  e2fsck -f /dev/mapper/testvg-testlv
  resize2fs /dev/mapper/testvg-testlv
  mount /dev/mapper/testvg-testlv test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_cleanup_of_the_test_environment&#34;&gt;Cleanup of the test environment&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Of course you should not do these steps on the real raid. These steps are just needed when you want to cleanup your testenvironment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  umount /tmp/test/test
  lvremove testvg testlv
  vgremove testvg
  pvremove  /dev/mapper/cryptotest
  cryptsetup close /dev/mapper/cryptotest
  mdadm --manage /dev/md2 --stop
  losetup -d /dev/loop0
  losetup -d /dev/loop1
  losetup -d /dev/loop2
  losetup -d /dev/loop3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>MySQL 5.6 Debian Wheezy Installation</title>
      <link>http://jotschi.de/2014/02/07/mysql-5.6-debian-wheezy-installation/</link>
      <pubDate>Fri, 07 Feb 2014 11:48:46 +0000</pubDate>
      
      <guid>http://jotschi.de/2014/02/07/mysql-5.6-debian-wheezy-installation/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Just a small snippet on how to setup the MySQL 5.6 database on debian wheezy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install libaio1
groupadd mysql
useradd -r -g mysql mysql
wget -O mysql-5.6.16-debian6.0-x86_64.deb http://downloads.mysql.com/archives/mysql-5.6/mysql-5.6.16-debian6.0-x86_64.deb
dpkg -i mysql-5.6.16-debian6.0-x86_64.deb
cd /usr/local
ln -s /opt/mysql/server-5.6 mysql
cd mysql
scripts/mysql_install_db --user=mysql
chown -R root .
chown -R mysql data
cp support-files/mysql.server /etc/init.d/mysql
mkdir -p /etc/mysql/conf.d/
cp my.cnf /etc/mysql/
echo $&#39;!include /etc/mysql/my.cnf\n!includedir /etc/mysql/conf.d/&#39; &amp;gt; my.cnf
update-rc.d mysql-5.7 defaults
service mysql start
./bin/mysql_secure_installation&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>High Performance MySQL Test Database Setup</title>
      <link>http://jotschi.de/2014/02/03/high-performance-mysql-testdatabase/</link>
      <pubDate>Mon, 03 Feb 2014 19:05:46 +0000</pubDate>
      
      <guid>http://jotschi.de/2014/02/03/high-performance-mysql-testdatabase/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sometimes your unit tests have run against a real database server. This post will not discuss the question whether this is avoidable or not. Please take a look at embedded database server (e.g: HSQLDB for Java and mocking techniques e.g: mockito) if you want to remove this dependency from your test environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Instead this post will show how to setup a blazing fast MySQL Server against which you can run your unit tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The main performance bonus is gained by the innodb_flush_log_at_trx_commit setting. This setting will change the flush behavior for the mysql server. Additionally linux tmpfs will be used to put the mysql data files directly into ram.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The mysql-tmpfs-wrapper.sh script will be used to replace the /etc/init.d/mysql start script. Symlink this file to /etc/init.d/myql-tmpfs.sh and use the sysv-rc-conf tool to remove the autostart/stop of the original /etc/init.d/mysql script. I used insserv /etc/init.d/mysql-tmpfs.sh to enable autostart for my wrapper script.
{% gist &lt;a href=&#34;https://gist.github.com/Jotschi/8792727&#34; class=&#34;bare&#34;&gt;https://gist.github.com/Jotschi/8792727&lt;/a&gt; %}&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The recreate_mysql_frombarecopy.sh will recreate the tmpfs ramdisk by using a bare copy of the mysql data directory.
{% gist &lt;a href=&#34;https://gist.github.com/Jotschi/8792866&#34; class=&#34;bare&#34;&gt;https://gist.github.com/Jotschi/8792866&lt;/a&gt; %}&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Add this mountpoint to your /etc/fstab file to define the mysql data tmpfs. You can use the stat tool to check the uid and gid for your mysql data directory (e.g: stat /opt/mysql/server-5.6/data)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;none            /opt/mysql/server-5.6/data  tmpfs   defaults,size=1000M,uid=999,gid=1000,mode=0700          0       0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I suggest to not directly modify the my.cnf file. Instead use the default my.cnf file and add a includedir section to include files in /etc/mysql/conf.d). This step is of course not needed when you use the original debian mysql server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;[mysqld]
bind-address             = 0.0.0.0

thread_cache_size        = 8
query_cache_size         = 32M
thread_concurrency       = 8
key_buffer_size          = 256M
max_allowed_packet       = 500M
table_open_cache         = 512
sort_buffer_size         = 256M
net_buffer_length        = 8K
read_buffer_size         = 256K
read_rnd_buffer_size     = 8M
myisam_sort_buffer_size  = 64M

innodb_use_native_aio          = false
innodb_data_file_path          = ibdata1:10M:autoextend:max:15360M
innodb_file_format             = Barracuda
innodb_flush_method            = O_DIRECT
innodb_write_io_threads        = 64
innodb_read_io_threads         = 64

#innodb_additional_mem_pool_size = 20M
innodb_buffer_pool_size        = 2G
innodb_log_files_in_group      = 2
innodb_log_buffer_size         = 8M
innodb_log_file_size           = 128M

innodb_flush_log_at_trx_commit = 2
innodb_lock_wait_timeout = 50

max_connect_errors       = 1000000
max_connections          = 350&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The last important step is to create the bare copy. I suggest that you stripdown your mysql as much as possible.
Example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1. Drop all databases except (mysql, perfomance_schema, information_schema)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2. /etc/init.d/mysql stop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3. Remove the ibdata and iblogfiles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4. /etc/init.d/mysql start&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5. Mysql should work and should have recreated the ibdata and logfiles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6. /etc/init.d/mysql stop&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7. cp -ra /opt/mysql/server-5.6/data /opt/mysql/server-5.6/databarecopy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8. rm -rf /opt/mysql/server-5.6/data/*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;9. /etc/init.d/mysql-tmpfs.sh start&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When put into lxc container a jenkins job can be created to restart the container on a regular basis and thus keep the mysql data directoy clean.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Happy testing!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry PI 433MHz Remote Controlled Power Plugs</title>
      <link>http://jotschi.de/2012/12/05/raspberry-pi-433mhz-remote-controlled-power-plugs/</link>
      <pubDate>Wed, 05 Dec 2012 00:18:40 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/12/05/raspberry-pi-433mhz-remote-controlled-power-plugs/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_hardware&#34;&gt;Hardware&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First you&amp;#8217;ll need to buy a set of remote controlled power plugs. I got mine from &lt;a href=&#34;http://www.pollin.de/shop/dt/MzMzOTQ0OTk-/Haustechnik/Installationsmaterial/Schalter_Steckdosen/Funk_Steckdosen_Set_2605.html&#34;&gt;pollin.de&lt;/a&gt; for around 10 €.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;http://jotschi.de/images/hx2262-remote/G550666.jpg&#34; alt=&#34;G550666&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Connect your 5V VCC from the GPIO pins of your Raspberry PI to the positiv terminal of your remote control.
Connect the GCN GPIO pin to the negativ terminal of your remote control.
Connect the PIN 17 GPIO pin to a 8k Ohm resistor and the resistor to pin P1 of the remote control.
I drilled a hole trough the existing via and scrapped away the soldermask to expose the copper for soldering a connection in place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;http://jotschi.de/images/hx2262-remote/hx2262-remote.jpg&#34; alt=&#34;hx2262 remote&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_software&#34;&gt;Software&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Install wiringpi&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install/&#34; class=&#34;bare&#34;&gt;https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install rcswitch-pi&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/r10r/rcswitch-pi&#34;&amp;gt;https://github.com/r10r/rcswitch-pi&#34; class=&#34;bare&#34;&gt;https://github.com/r10r/rcswitch-pi&#34;&amp;gt;https://github.com/r10r/rcswitch-pi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute test command&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;// Send off command to plug 4 with system id 11111
./send 11111 4 0
// Send on command to plug 4 with system id 11111
./send 11111 4 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>NFS Debian Squeeze CheatSheet</title>
      <link>http://jotschi.de/2012/11/12/nfs-debian-squeeze-cheatsheet/</link>
      <pubDate>Mon, 12 Nov 2012 23:20:35 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/11/12/nfs-debian-squeeze-cheatsheet/</guid>
      <description>&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Install nfs&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;apt-get install nfs-kernel-server&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Add the export&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt; echo &#34;/media/nfs-share 192.168.0.15(rw,no_subtree_check)&#34; &amp;gt;&amp;gt; /etc/exports&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Update your exports&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;exportfs -a&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Change the following line in /etc/default/nfs-kernel-server&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;RPCMOUNTDOPTS=&#34;--manage-gids&#34;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;RPCMOUNTDOPTS=&#34;-p 32767 --manage-gids&#34;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This will bind the nfs to the given port. Otherwise i guess you would have to use portmap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Finally mount your data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;sudo mount -t nfs YOURNFSSERVERIP:/media/nfs-share nfs-share&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A fstab entry could look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;YOURNFSSERVERIP:/media/nfs-share /media/nfs-share nfs rw,rsize=4096,wsize=4096,hard,intr,async,nodev,nosuid 0 0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>DIY Dual Screen HMD</title>
      <link>http://jotschi.de/2012/09/23/oculus-rift-diy-dual-screen-clone/</link>
      <pubDate>Sun, 23 Sep 2012 18:18:01 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/09/23/oculus-rift-diy-dual-screen-clone/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This page will contain images and descriptions of my current DIY HMD project that was inspired by the Oculus Rift. Please note that this rift clone will most likely not be compatible with any &#34;Rift Ready&#34; Game.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Used Parts:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Displays: 2x HV056WX1-100&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Driver Boards: NT68674.5X, Unknown 7+1 Driver Board&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tracking: The &amp;lt;a href=&#34;https://www.sparkfun.com/products/10736&#34;&amp;gt;9 DoF Razor IMU from Sparkfun&amp;lt;/a&amp;gt; in addition to the WiiMote Pixart sensor (connected via I2C).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dual Head Setup: &amp;lt;a href=&#34;http://www.matrox.com/graphics/en/products/gxm/dh2go/digital_se/&#34;&amp;gt;Matrox Dual Head 2 Go Digital Edition&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lenses: &amp;lt;a href=&#34;http://bit.ly/Tyt7sA&#34;&amp;gt;2x 2 inch 5x pocket loupe magnifier with Aspheric Lens&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Hardware TODOs:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IR LED mounting outside the goggles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mouting fixture for the LCD Panels inside the goggles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IMU mounting inside the goggles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;External Pixart sensor mounting&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Software TODOs:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenGL ES Demo Code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WiiMote I2C WiringPi (Example + Code)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Raspberry PI UART &amp;#8594; Razor IMU (Example + Code)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;My rift inpired HMD will use two HV056WX1-100 LCD panels. Each display has an active area of 120.960 mm by 75.600 mm. My setup will utilizes around 75.00 mm by 75.00 mm of each lcd screen per eye.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;h2&amp;gt;Driver Box&amp;lt;/h2&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I finally put all the pices together for my driver box. It houses two driver board. The 7+1 Board which i bought from &amp;lt;a href=&#34;http://www.ebay.com.au/itm/5-6inch-TFT-LCD-Module-1280-800-HV056WX1-100-/300598400802?pt=LH_DefaultDomain_0&amp;amp;hash=item45fd0f9722#ht_5639wt_1187&#34;&amp;gt;eBay (vitrolight)&amp;lt;/a&amp;gt; and the smaller NT68674.5X.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/driverboard_box-top.jpg&#34;&amp;gt;
&amp;lt;img src=&#34;http://jotschi.de/images/hmd/driverboard_box-top.jpg&#34; alt=&#34;&#34; title=&#34;driverboard_box-top&#34; width=&#34;600&#34; class=&#34;aligncenter size-full wp-image-842&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/driverboard_box-side.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/driverboard_box-side.jpg&#34; alt=&#34;&#34; title=&#34;driverboard_box-side&#34; width=&#34;600&#34; class=&#34;aligncenter size-full wp-image-843&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;h2&amp;gt;LVDS &amp;lt;&amp;#8594; HDMI Breakout Boards&amp;lt;/h2&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Both boards use a LVDS&amp;#8594;HDMI breakout adapter. The 7+1 board uses a adapter which i build from an spare HDMI cable with an female connector. The smaller NT68674.5X uses a breakout board which i build from an HDMI terminal block.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/hdmi-layout-v9_pcb.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/hdmi-layout-v9_pcb.jpg&#34; alt=&#34;&#34; title=&#34;hdmi-layout-v9_pcb&#34; width=&#34;444&#34; height=&#34;840&#34; class=&#34;aligncenter size-full wp-image-844&#34; /&amp;gt;&amp;lt;/a&amp;gt;
Note: The &#34;blon&#34; label is not positioned correctly. It should be moved down to the other pin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The new adapter works better when compared with the adapter that utilizes a hdmi cable. Soldering fine cables to a PCB is never a good idea. I ran into trouble with loose or broken connections. Nevertheless.. the adapter which i use for the 7+1 board works well for the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/pcb-breakoutboard-notetched.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/pcb-breakoutboard-notetched.jpg&#34; alt=&#34;&#34; title=&#34;pcb-breakoutboard-notetched&#34; width=&#34;345&#34; height=&#34;514&#34; class=&#34;aligncenter size-full wp-image-845&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/pcb-breakoutboard-etched-cleaned.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/pcb-breakoutboard-etched-cleaned.jpg&#34; alt=&#34;&#34; title=&#34;pcb-breakoutboard-etched-cleaned&#34; width=&#34;347&#34; height=&#34;465&#34; class=&#34;aligncenter size-full wp-image-846&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Failed attempts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/pinheader_spacer.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/pinheader_spacer.jpg&#34; alt=&#34;&#34; title=&#34;pinheader_spacer&#34; width=&#34;600&#34;  class=&#34;aligncenter wp-image-794&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Display driver board + breakout board:
&amp;lt;a href=&#34;http://jotschi.de/images/hmd/board_pinheader_spacer.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/board_pinheader_spacer.jpg&#34; alt=&#34;&#34; title=&#34;board_pinheader_spacer&#34; width=&#34;600&#34; class=&#34;aligncenter wp-image-796&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;h2&amp;gt;Notes About Boards And Cables&amp;lt;/h2&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I tried various HDMI cables to connect my LVDS breakout boards. It turns out that Amazon basic cables work very well. I also tried super thin HDMI cables. Those also work but it really depends on the LVDS cable that was shipped with the display. I got two different LVDS cables because i bought two different boards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The LVDS board which was included with my NT68674.5X has a better quality than the one i got with the 7+1 board.
&amp;lt;a href=&#34;http://jotschi.de/images/hmd/DriverBoard-NT68674.5X.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/DriverBoard-NT68674.5X.jpg&#34; alt=&#34;&#34; title=&#34;DriverBoard-NT68674.5X&#34; width=&#34;600&#34;  class=&#34;aligncenter size-full wp-image-850&#34; /&amp;gt;&amp;lt;/a&amp;gt;
The cable that was included with my 7+1 board got some unpopulated pins for VCC and Ground where the other cable was completely populated. Maybe it uses ground from the BLON pin for the backlight connection?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I also got the impression that the 7+1 board provides a better signal to the display in comparison to the NT68674.5X. Overall the 7+1 Board could handle longer cables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;h2&amp;gt;HMD Unit - Paper Prototype&amp;lt;/h2&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At the first step i build a paper model for the HMD so that i could get an idea how the screens would fit inside the case and what the dimensions would be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/paper_proto1.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/paper_proto1.jpg&#34; alt=&#34;&#34; title=&#34;paper_proto1&#34; width=&#34;600&#34; class=&#34;aligncenter wp-image-806&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The unpainted paper model:
&amp;lt;a href=&#34;http://jotschi.de/images/hmd/paper_proto2.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/paper_proto2.jpg&#34; alt=&#34;&#34; title=&#34;paper_proto2&#34; width=&#34;600&#34; class=&#34;aligncenter wp-image-805&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;h2&amp;gt;HMD Lense Mount&amp;lt;/h2&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/skigoggles_painted.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/skigoggles_painted.jpg&#34; alt=&#34;&#34; title=&#34;skigoggles_painted&#34; width=&#34;600&#34;  class=&#34;aligncenter wp-image-802&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/skigoggles_unpainted.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/skigoggles_unpainted.jpg&#34; alt=&#34;&#34; title=&#34;skigoggles_unpainted&#34; width=&#34;600&#34; class=&#34;aligncenter wp-image-795&#34; /&amp;gt;&amp;lt;/a&amp;gt;
The goggles. Somehow they remind me of the goggles that Abe Sapien wears.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;h2&amp;gt;HMD Renderings&amp;lt;/h2&amp;gt;
A simple rendering that shows how the screens will be positioned inside the case:
&amp;lt;a href=&#34;http://jotschi.de/images/hmd/view-wire1.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/view-wire1.jpg&#34; alt=&#34;&#34; title=&#34;view-wire1&#34; width=&#34;600&#34; class=&#34;aligncenter wp-image-797&#34; /&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&#34;http://jotschi.de/images/hmd/view-bare.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/view-bare.jpg&#34; alt=&#34;&#34; title=&#34;view-bare&#34; width=&#34;600&#34; class=&#34;aligncenter wp-image-816&#34; /&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href=&#34;http://jotschi.de/images/hmd/view-inside1.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/view-inside1.jpg&#34; alt=&#34;&#34; title=&#34;view-inside1&#34; width=&#34;600&#34; class=&#34;aligncenter wp-image-815&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;h2&amp;gt;HMD Unit - Plastic Model&amp;lt;/h2&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I measured the paper model and cut some plastic sheets that were hot glued + cable tied + scotch taped together.
&amp;lt;a href=&#34;http://jotschi.de/images/hmd/plastic_proto2.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/plastic_proto2.jpg&#34; alt=&#34;&#34; title=&#34;plastic_proto2&#34; width=&#34;600&#34;  class=&#34;aligncenter wp-image-830&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/hmd/plastic_proto1.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/plastic_proto1.jpg&#34; alt=&#34;&#34; title=&#34;plastic_proto1&#34; width=&#34;600&#34;  class=&#34;aligncenter wp-image-831&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The backside of the HMD can be opened for easy access to displays and other internal wiring. The displays are placed in between two guide rails and affixed using a plastic plate that is connected to a screw that can be fastened.
&amp;lt;a href=&#34;http://jotschi.de/images/hmd/HMD-open.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hmd/HMD-open.jpg&#34; alt=&#34;&#34; title=&#34;HMD-open&#34; width=&#34;1024&#34; height=&#34;768&#34; class=&#34;aligncenter size-full wp-image-849&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry PI - 25LC010A EEPROM Howto</title>
      <link>http://jotschi.de/2012/09/06/raspberry-pi-25lc010a-eeprom-howto/</link>
      <pubDate>Thu, 06 Sep 2012 22:00:37 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/09/06/raspberry-pi-25lc010a-eeprom-howto/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This article will explain how to get a SPI connection working using the Raspberry PI GPIO pins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Hardware:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I used the &lt;a href=&#34;http://learn.adafruit.com/adafruit-pi-cobbler-kit/overview&#34;&gt;Adafruit pi cobbler&lt;/a&gt; to connect the GPIO header with my breadboard.
The 25LC010a eeprom chip is a small eeprom chip. The datasheet: &lt;a href=&#34;http://ww1.microchip.com/downloads/en/devicedoc/21832c.pdf&#34; class=&#34;bare&#34;&gt;http://ww1.microchip.com/downloads/en/devicedoc/21832c.pdf&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Software:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I used the default raspbian image for the raspberry pi. The &lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install/&#34;&gt;wiringpi toolchain&lt;/a&gt; contains some neat little programs and libraries to get I2C and SPI working with the raspberry pi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Disable the blacklist by adding a # in front of each line because you will need the SPI kernel module:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/etc/modprobe.d/raspi-blacklist.conf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Reboot the PI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install wiringPI as described &lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install git-core
git clone git://git.drogon.net/wiringPi
cd wiringPi
./build&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Use the build gpio tool to load and setup SPI&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gpio load spi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Connect the IC as shown in this &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;
&amp;lt;a href=&#34;http://jotschi.de/images/25LC010/raspberry_pi-spi-25LC010a_bb.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/25LC010/raspberry_pi-spi-25LC010a_bb.jpg&#34; alt=&#34;&#34; title=&#34;raspberry_pi-spi-25LC010a_bb&#34; width=&#34;1024&#34; height=&#34;726&#34; class=&#34;aligncenter size-full wp-image-787&#34; /&amp;gt;&amp;lt;/a&amp;gt;
The two resistors are very important because they are used to pullup the SCK and MOSI pin. The eeprom works with 5V or 3.3V. I used 3.3V because the GPIO pins only tolerate 3.3V input. Higher voltage might damage your board.
&lt;a href=&#34;http://twitpic.com/arlj3z&#34;&#34; class=&#34;bare&#34;&gt;http://twitpic.com/arlj3z&#34;&lt;/a&gt; alt=&#34;Just got SPI communication with an 25lc010a and my raspberry &amp;#8230;&amp;#8203; on Twitpic&#34;&gt;&lt;/span&gt;
&amp;lt;img src=&#34;http://twitpic.com/show/thumb/arlj3z.jpg&#34; width=&#34;150&#34; height=&#34;150&#34; alt=&#34;Just got SPI communication with an 25lc010a and my raspberry &amp;#8230;&amp;#8203; on Twitpic&#34;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compile the source file. You can use this make file:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;#DEBUG  = -g -O0
DEBUG   = -O3
CC      = gcc
INCLUDE = -I/usr/local/include
CFLAGS  = $(DEBUG) -Wall $(INCLUDE) -Winline -pipe

LDFLAGS = -L/usr/local/lib
LIBS    = -lwiringPi

# Should not alter anything below this line
###############################################################################

SRC     =       rpi_spi_eepromtest.c

OBJ     =       rpi_spi_eepromtest.o

all:            rpi_spi_eepromtest

rpi_spi_eepromtest:        rpi_spi_eepromtest.o
        @echo [link]
        $(CC) -o $@ rpi_spi_eepromtest.o $(LDFLAGS) $(LIBS)

.c.o:
        @echo [CC] $&amp;lt;
        @$(CC) -c $(CFLAGS) $&amp;lt; -o $@

clean:
        rm -f $(OBJ) *~ core tags rpi_spi_eepromtest

tags:   $(SRC)
        @echo [ctags]
        @ctags $(SRC)

depend:
        makedepend -Y $(SRC)

# DO NOT DELETE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sources: rpi_spi_eepromtest.c&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;{% gist 3659646 %}&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;http://jotschi.de/images/25LC010/raspberry_pi-spi-25LC010a_schem.jpg&#34; alt=&#34;raspberry pi spi 25LC010a schem&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WiiMote PixArt Sensor Testing Via Bus Pirate </title>
      <link>http://jotschi.de/2012/08/26/wiimote-pixart-sensor-testing-via-bus-pirate/</link>
      <pubDate>Sun, 26 Aug 2012 15:52:18 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/08/26/wiimote-pixart-sensor-testing-via-bus-pirate/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The WiiMote PixArt sensor can be unsoldered and used as a regular I2C device. Here you can find some information on how to get it working with the buspirate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unsoldering tip: Disconnect the two metal clips that are connected to the case of the sensor. You can carefully lift the sensor after that has been done. The connection wires can easily be reinserted into the sensor housing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;http://jotschi.de/images/pixart/pixart_pinout.jpg&#34; alt=&#34;pixart pinout&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;http://jotschi.de/images/pixart/pixart_pinout_2.jpg&#34; alt=&#34;pixart pinout 2&#34;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;IR Camera pin configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1: 3.3V &amp;#8594; BusPirate 3.3V &amp;amp; BusPirate VPU&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2: GND &amp;#8594; BusPirate GND&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3: GND &amp;#8594; BusPirate GND&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4: NC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5: SCL &amp;#8594; BusPirate CLK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6: SDA &amp;#8594; BusPirate MOSI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7: CLK &amp;#8594; Connect to pin 8 of an 25MHz quartz oscillator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8: Reset &amp;#8594; Pull Up with 22k Resistor to 3.3V&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additionally you have to provide voltage and ground for your quartz oscillator. Connect the buspirate VPU pin to VCC 3.3V.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;BusPirate Commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;// Reset the bus pirate
#
// Switch to I2C mode
m4
// Select I2C speed
3
// Turn off the voltage
w
// Turn on the voltage
W
// Turn on the Pulldown resistor
P
// Print the voltages
v
// Control byte, allows modification of settings / Turn camera on
[0xB0 0x30 0x01]
[0xB0 0x30 0x08]
 // 10 MAXSIZE - Maximum blob size. Wii uses values from 0x62 to 0xc8.
[0xB0 0x06 0x90]
// 15 GAIN - Sensor Gain. Smaller values = higher gain. Numerical gain is proportional to 1/2^(n/16) for n&amp;lt;0x40
[0xB0 0x08 0xC0]
// 10 GAINLIMIT - Sensor Gain Limit. Must be less than GAIN for camera to function.
[0xB0 0x1A 0x40]
[0xB0 0x33 0x33]

// Request data
[0xB0 0x36]
// Read 16 bytes of data
[0xB1 r:16]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Forward TCP Connections with Iptables</title>
      <link>http://jotschi.de/2012/05/01/forward-tcp-connections-with-iptables/</link>
      <pubDate>Tue, 01 May 2012 11:49:47 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/05/01/forward-tcp-connections-with-iptables/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sometimes it is useful to forward a tcp connection to another server. For example if you want to switch a web service to another servers with no DNS delay.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You have to enable ip_forward and nat for the given port using iptables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;# echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward
# iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination someip:80
# iptables -t nat -A POSTROUTING -j MASQUERADE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Fail2Ban Debian Cheat Sheet</title>
      <link>http://jotschi.de/2012/04/29/fail2ban-debian-cheat-sheet/</link>
      <pubDate>Sun, 29 Apr 2012 11:21:58 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/04/29/fail2ban-debian-cheat-sheet/</guid>
      <description>&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install fail2ban&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Set the LogLevel parameter within /etc/ssh/sshd_config from INFO to VERBOSE. This allows fail2ban to read failed login attempts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;LogLevel VERBOSE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Restart sshd&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/etc/init.d/ssh restart&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Change the action parameter within the jail.conf to action_mwl. Otherwise you will not get any e-mail notification about banned ips.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;action = %(action_mwl)s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Finally make sure that your ssh section within jail.conf is enabled and points to the correct logfile.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Arduino Ethernet Shield Simple REST API Example</title>
      <link>http://jotschi.de/2012/04/21/arduino-ethernet-shield-simple-rest-api-example/</link>
      <pubDate>Sat, 21 Apr 2012 12:59:27 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/04/21/arduino-ethernet-shield-simple-rest-api-example/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m currently developing a small home security system. The arduino + ethernet shield will provide the rest api control interface for the system. Later on that interface will be controllable with my android phone. (I&amp;#8217;ll probably write another post about that).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I took the &lt;a href=&#34;http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1284844153&#34;&gt;webserver example&lt;/a&gt; from Hari Wiguna and modified it a little bit. Currently the implementation is not able the handle
 POST request or query parameters. At the moment only path segments are identified and separated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;#include &amp;lt;SPI.h&amp;gt;
#include &amp;lt;Ethernet.h&amp;gt;

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192,168,10, 177);

char cmd[15];
char param1[15];
boolean systemArmed = true;

#define STRING_BUFFER_SIZE 128
char buffer[STRING_BUFFER_SIZE];

EthernetServer server(80);

void setup() {
  Serial.begin(9600);
  // start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print(&#34;server is at &#34;);
  Serial.println(Ethernet.localIP());
}

void send404(EthernetClient client) {
     client.println(&#34;HTTP/1.1 404 OK&#34;);
     client.println(&#34;Content-Type: text/html&#34;);
     client.println(&#34;Connnection: close&#34;);
     client.println();
     client.println(&#34;&amp;lt;!DOCTYPE HTML&amp;gt;&#34;);
     client.println(&#34;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;404&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;);
}

void sendStatus(EthernetClient client) {

   // Send a standard http response header
   client.println(&#34;HTTP/1.1 200 OK&#34;);
   client.println(&#34;Content-Type: application/json&#34;);
   client.println(&#34;Connnection: close&#34;);
   client.println();
   client.println(&#34;{&#34;);

   // Output the value of each analog input pin
   for (int analogChannel = 0; analogChannel &amp;lt; 6; analogChannel++) {
       int sensorReading = analogRead(analogChannel);
       client.print(&#34;\&#34;analog_in_&#34;);
       client.print(analogChannel);
       client.print(&#34;\&#34;: &#34;);
       client.print(sensorReading);

//       if (analogChannel != 5) {
           client.println(&#34;,&#34;);
//       }
   }
   client.print(&#34;\&#34;system_armed\&#34;: &#34;);
   client.print( systemArmed );
   client.println(&#34;\n}&#34;);
}

/**
 * Parse the string and return an array which contains all path segments
 */
char** parse(char* str) {

	char ** messages;
	messages = (char**)malloc(sizeof(char *));
	char *p;
	p = strtok(str, &#34; &#34;);
	unsigned int i = 0;
	while (p != NULL) {
	  p = strtok(NULL, &#34;/&#34;);
	  char *sp;
	  boolean last = false;
	  sp = strchr(p, &#39; &#39;);
	  if (sp != NULL) {
            *sp++ = &#39;\0&#39;;
	    last = true;
	  }
	  messages[i] = p;
	  i++;
	  if (last) {
	    break;
	  }
	  messages = (char**)realloc(messages, sizeof(char *) * i + 1);
	}

	messages[i] = &#39;\0&#39;;
	return messages;
}

void armSystem() {
  systemArmed = true;
}

void disarmSystem() {
  systemArmed = false;
}

void handleCommand(EthernetClient client, char* cmd, char* param) {
    if (strcmp(cmd, &#34;status&#34;) == 0) {
      Serial.println(&#34;status&#34;);
      sendStatus(client);
    } else if (strcmp(cmd, &#34;arm&#34;) == 0) {
      armSystem();
      sendStatus(client);
      Serial.println(&#34;arm&#34;);
    } else if (strcmp(cmd, &#34;disarm&#34;) == 0) {
      disarmSystem();
      sendStatus(client);
      Serial.println(&#34;disarm&#34;);
    } else {
      send404(client);
    }
}

int countSegments(char* str) {
  int p = 0;
  int count = 0;
  while (str[p] != &#39;\0&#39;) {
    if (str[p] == &#39;/&#39;) {
      count++;
    }
    p++;
  }
  // We don&#39;t want to count the / in &#39;HTTP/1.1&#39;
  count--;
  return count;
}

void loop() {
  // listen for incoming clients
  EthernetClient client = server.available();
  if (client) {
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {

        char c;
        int bufindex = 0; // reset buffer
        buffer[0] = client.read();
        buffer[1] = client.read();
        bufindex = 2;
        // Read the first line to determin the request page
        while (buffer[bufindex-2] != &#39;\r&#39; &amp;amp;&amp;amp; buffer[bufindex-1] != &#39;\n&#39;) {
            // read full row and save it in buffer
            c = client.read();
            if (bufindex&amp;lt;STRING_BUFFER_SIZE) {
              buffer[bufindex] = c;
            }
            bufindex++;
        }
        // Clean buffer for next row
        bufindex = 0;

        // Parse the query string
        int nSegments = countSegments(buffer);
        char **pathsegments = parse(buffer);

        int i = 0;
        for(i=0; i&amp;lt;nSegments; i++) {
          Serial.println(pathsegments[i]);
        }

        if (c == &#39;\n&#39; &amp;amp;&amp;amp; currentLineIsBlank) {
          handleCommand(client, pathsegments[0], pathsegments[1]);
          break;
        }

        if (c == &#39;\n&#39;) {
          currentLineIsBlank = true;
        } else if (c != &#39;\r&#39;) {
          currentLineIsBlank = false;
        }
      }
    }
    // Give the web browser time to receive the data
    delay(1);
    // Close the connection:
    client.stop();
    Serial.println(&#34;Client disonnected&#34;);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
--- 
layout: post
status: publish
published: true
title: Cross Compile Pandaboard PowerVR OpenGL ES2 Example
author: Jotschi
author_login: admin
author_email: webmaster@jotschi.de
author_url: http://www.Jotschi.de
excerpt: |
  This post is about how to cross compile a very simple OpenGL ES2 example for the Pandaboard within a Debian Linux chroot environment.
  

wordpress_id: 594
wordpress_url: /?p=594
date: 2011-07-08 14:12:40 +00:00
categories: 
- Uncategorized
tags: []

comments: 
- id: 5391
  author: dan
  author_email: cactux.gh@gmail.com
  author_url: ""
  date: 2012-03-14 11:27:43 +0000
  date_gmt: 2012-03-14 09:27:43 +0000
  content: |-
    hi,
    I try to run xapt and such binary is not there by default. I tried to install the xapt, but such pkg does not exist. By any chance do you can you update your article in order to reflect the new changes
    
    thank you for your help
    
    cheers
- id: 5398
  author: Jotschi
  author_email: webmaster@jotschi.de
  author_url: http://www.Jotschi.de
  date: 2012-03-14 22:57:20 +0000
  date_gmt: 2012-03-14 20:57:20 +0000
  content: |-
    Hi dan,
    
    xapt is only included in debian testing and debian sid. See http://packages.debian.org/search?keywords=xapt
    
    Greetings,
    
    Jotschi
---
This post is about how to cross compile a very simple OpenGL ES2 example for the Pandaboard within a Debian Linux chroot environment.

<a id="more"></a><a id="more-594"></a>

<strong>What do we need?</strong>
<i>
<ul>
<li>Pandaboard running Ubuntu 11 (Natty)</li>
<li>x86 (i386) Workstation running Debian</li>
<li><a href="http://ppa.launchpad.net/tiomap-dev/release/ubuntu/pool/main/p/pvr-omap4/">pvr-omap4 orig package</a> (e.g.: <a href="http://ppa.launchpad.net/tiomap-dev/release/ubuntu/pool/main/p/pvr-omap4/pvr-omap4_1.7.5.2+git20110610+9696932c.2.orig.tar.gz">pvr-omap4_1.7.5.2+git20110610+9696932c.2.orig.tar.gz</a>) </li>
<li><a href="/downloads/PandaboardPowerVROGLES2Example.tgz">Archive</a> with OpenGL ES2 example for the Pandaboard</li>
</ul>
</i>




h2. 1. Create a chroot environment

At first we need a chroot environment in which we can compile our code against arm architecture.
{% raw %}
<pre class="syntax c">
# use debootstrap to create a chroot environment
debootstrap --arch=i386 testing rootfs/
# Switch into the chroot environment
chroot rootfs
# Install some basic tools
apt-get install vim less pdebuild-cross 
</pre>
{% endraw %}

h2. 2. Update our apt sources
Add the emdebian repository.
{% raw %}
<pre class="syntax c">
echo "deb http://ftp.at.debian.org/debian/ testing main contrib non-free" > /etc/apt/sources.list
echo "deb http://www.emdebian.org/debian/ testing main" >> /etc/apt/sources.list 
apt-get install emdebian-archive-keyring
apt-get update
</pre>
{% endraw %}

h3. 3. Install the crosscompiler tools from emdebian repository
{% raw %}
<pre class="syntax c">
apt-get install g++-4.4-arm-linux-gnueabi
apt-get install gcc-4.4-arm-linux-gnueabi
</pre>
{% endraw %}

h3. 4. PowerVR libraries and headers
Download the pvr-omap4 archive which contains a set of libraries for powervr. The files can be found at <a href="https://launchpad.net/~tiomap-dev">Launchpad TI Dev</a>. Those binaries are used to create the omap4 ubuntu packages. I used the pvr-omap4_1.7.5.2+git20110610+9696932c.2.orig.tar.gz archive.
{% raw %}
<pre class="syntax c">
# Extract pvr-omap4 archive
cd /opt/
wget http://ppa.launchpad.net/tiomap-dev/release/ubuntu/pool/main/p/pvr-omap4/pvr-omap4_1.7.5.2+git20110610+9696932c.2.orig.tar.gz
tar xvfz pvr-omap4_1.7.5.2+git20110610+9696932c.2.orig.tar.gz 
</pre>
{% endraw %}

h3. 5. Get cross compile dependencies
{% raw %}
<pre class="syntax c">
xapt -m -a armel libx11-dev
xapt -m -a armel libdrm-dev
</pre>
{% endraw %}

h3. 6. Extract the example and compile

<h4><a href="/downloads/PandaboardPowerVROGLES2Example.tgz">Download</a> the example</h4>
<pre class="syntax c">
cd /opt/
wget http://www.jotschi.de/downloads/PandaboardPowerVROGLES2Example.tgz
tar xvfz PandaboardPowerVROGLES2Example.tgz
</pre>

h4. Store Settings
Contents of /opt/settings.inc

{% raw %}
<pre class="syntax c">
#!/bin/bash
export X11ROOT=/usr/arm-linux-gnueabi/
export PVR_OMAP_FILES=/opt/pvr-omap4-1.7.5.2+git20110610+9696932c.2
</pre>
{% endraw %}

<h4>Load settings and compile:</h4>

{% raw %}
<pre class="syntax c">
cd /opt/OGLES2PowerVRPandaboardExample
# If . does not work use source to include the settings
. /opt/settings.inc
# Invoke the build
make
</pre>
{% endraw %}


<h3>Optional for pandaboard cross platform development</h3>
Now i have a build arm ready binary executable within my chroot environment. To execute it straight from eclipse we have to create another script. The script will transfer our executable (in this case OGLES2HelloTriangle) to the Pandaboard OMAP4 platform and execute it there.

<i>run.sh:</i>
{% raw %}
<pre class="syntax c">
#!/bin/bash
echo "Transfering"
scp ReleaseX11/OGLES2HelloTriangle  root@panda:/opt/

echo "Executing"
ssh root@panda DISPLAY=:0 /opt/OGLES2HelloTriangle
</pre>
{% endraw %}

Just create a new C/C++ Application run configuration that uses the following settings:
<ul>
<li>C/C++ Application: /bin/bash</li>
<li>Program arguments: /home/myuser/workspace/MyProject/run.sh</li>
</ul>

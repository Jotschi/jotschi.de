<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technik on Jotschi&#39;s Blog</title>
    <link>http://jotschi.de/categories/technik/</link>
    <description>Recent content in Technik on Jotschi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Dec 2012 00:18:40 +0000</lastBuildDate>
    <atom:link href="http://jotschi.de/categories/technik/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Raspberry PI 433MHz Remote Controlled Power Plugs</title>
      <link>http://jotschi.de/2012/12/05/raspberry-pi-433mhz-remote-controlled-power-plugs/</link>
      <pubDate>Wed, 05 Dec 2012 00:18:40 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/12/05/raspberry-pi-433mhz-remote-controlled-power-plugs/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_hardware&#34;&gt;Hardware&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;First you&amp;#8217;ll need to buy a set of remote controlled power plugs. I got mine from &amp;lt;a href=&#34;http://www.pollin.de/shop/dt/MzMzOTQ0OTk-/Haustechnik/Installationsmaterial/Schalter_Steckdosen/Funk_Steckdosen_Set_2605.html&#34;&amp;gt;pollin.de&amp;lt;/a&amp;gt; for around 10 â‚¬.
&amp;lt;a href=&#34;http://jotschi.de/images/hx2262-remote/G550666.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hx2262-remote/G550666.jpg&#34; alt=&#34;&#34; title=&#34;G550666&#34; width=&#34;300&#34; height=&#34;225&#34; class=&#34;aligncenter size-full wp-image-854&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Connect your 5V VCC from the GPIO pins of your Raspberry PI to the positiv terminal of your remote control.
Connect the GCN GPIO pin to the negativ terminal of your remote control.
Connect the PIN 17 GPIO pin to a 8k Ohm resistor and the resistor to pin P1 of the remote control.
I drilled a hole trough the existing via and scrapped away the soldermask to expose the copper for soldering a connection in place.
&amp;lt;a href=&#34;http://jotschi.de/images/hx2262-remote/hx2262-remote.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/hx2262-remote/hx2262-remote.jpg&#34; alt=&#34;&#34; title=&#34;hx2262-remote&#34; width=&#34;1024&#34; height=&#34;742&#34; class=&#34;aligncenter size-full wp-image-855&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_software&#34;&gt;Software&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Install wiringpi&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install/&#34; class=&#34;bare&#34;&gt;https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install rcswitch-pi&lt;/p&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/r10r/rcswitch-pi&#34;&amp;gt;https://github.com/r10r/rcswitch-pi&#34; class=&#34;bare&#34;&gt;https://github.com/r10r/rcswitch-pi&#34;&amp;gt;https://github.com/r10r/rcswitch-pi&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute test command&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;// Send off command to plug 4 with system id 11111
./send 11111 4 0
// Send on command to plug 4 with system id 11111
./send 11111 4 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>NFS Debian Squeeze CheatSheet</title>
      <link>http://jotschi.de/2012/11/12/nfs-debian-squeeze-cheatsheet/</link>
      <pubDate>Mon, 12 Nov 2012 23:20:35 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/11/12/nfs-debian-squeeze-cheatsheet/</guid>
      <description>&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Install nfs&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;apt-get install nfs-kernel-server&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Add the export&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt; echo &#34;/media/nfs-share 192.168.0.15(rw,no_subtree_check)&#34; &amp;gt;&amp;gt; /etc/exports&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Update your exports&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;exportfs -a&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Change the following line in /etc/default/nfs-kernel-server&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;RPCMOUNTDOPTS=&#34;--manage-gids&#34;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;RPCMOUNTDOPTS=&#34;-p 32767 --manage-gids&#34;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This will bind the nfs to the given port. Otherwise i guess you would have to use portmap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Finally mount your data:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;sudo mount -t nfs YOURNFSSERVERIP:/media/nfs-share nfs-share&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A fstab entry could look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;YOURNFSSERVERIP:/media/nfs-share /media/nfs-share nfs rw,rsize=4096,wsize=4096,hard,intr,async,nodev,nosuid 0 0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry PI - 25LC010A EEPROM Howto</title>
      <link>http://jotschi.de/2012/09/06/raspberry-pi-25lc010a-eeprom-howto/</link>
      <pubDate>Thu, 06 Sep 2012 22:00:37 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/09/06/raspberry-pi-25lc010a-eeprom-howto/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This article will explain how to get a SPI connection working using the Raspberry PI GPIO pins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Hardware:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I used the &amp;lt;a href=&#34;http://learn.adafruit.com/adafruit-pi-cobbler-kit/overview&#34;&amp;gt;Adafruit pi cobbler&amp;lt;/a&amp;gt; to connect the GPIO header with my breadboard.
The 25LC010a eeprom chip is a small eeprom chip. The datasheet can be found &amp;lt;a href=&#34;http://ww1.microchip.com/downloads/en/devicedoc/21832c.pdf&#34;&amp;gt;here&amp;lt;/a&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Software:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I used the default raspbian image for the raspberry pi. The &amp;lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install/&#34;&amp;gt;wiringpi toolchain&amp;lt;/a&amp;gt; contains some neat little programs and libraries to get I2C and SPI working with the raspberry pi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Disable the blacklist by adding a # in front of each line because you will need the SPI kernel module:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/etc/modprobe.d/raspi-blacklist.conf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Reboot the PI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install wiringPI as described &amp;lt;a href=&#34;https://projects.drogon.net/raspberry-pi/wiringpi/download-and-install/&#34;&amp;gt;here&amp;lt;/a&amp;gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt-get install git-core
git clone git://git.drogon.net/wiringPi
cd wiringPi
./build&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Use the build gpio tool to load and setup SPI&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gpio load spi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Connect the IC as shown in this &lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;
&amp;lt;a href=&#34;http://jotschi.de/images/25LC010/raspberry_pi-spi-25LC010a_bb.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/25LC010/raspberry_pi-spi-25LC010a_bb.jpg&#34; alt=&#34;&#34; title=&#34;raspberry_pi-spi-25LC010a_bb&#34; width=&#34;1024&#34; height=&#34;726&#34; class=&#34;aligncenter size-full wp-image-787&#34; /&amp;gt;&amp;lt;/a&amp;gt;
The two resistors are very important because they are used to pullup the SCK and MOSI pin. The eeprom works with 5V or 3.3V. I used 3.3V because the GPIO pins only tolerate 3.3V input. Higher voltage might damage your board.
&lt;a href=&#34;http://twitpic.com/arlj3z&#34;&#34; class=&#34;bare&#34;&gt;http://twitpic.com/arlj3z&#34;&lt;/a&gt; alt=&#34;Just got SPI communication with an 25lc010a and my raspberry &amp;#8230;&amp;#8203; on Twitpic&#34;&gt;&lt;/span&gt;
&amp;lt;img src=&#34;http://twitpic.com/show/thumb/arlj3z.jpg&#34; width=&#34;150&#34; height=&#34;150&#34; alt=&#34;Just got SPI communication with an 25lc010a and my raspberry &amp;#8230;&amp;#8203; on Twitpic&#34;&amp;gt;
&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compile the source file. You can use this make file:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;#DEBUG  = -g -O0
DEBUG   = -O3
CC      = gcc
INCLUDE = -I/usr/local/include
CFLAGS  = $(DEBUG) -Wall $(INCLUDE) -Winline -pipe

LDFLAGS = -L/usr/local/lib
LIBS    = -lwiringPi

# Should not alter anything below this line
###############################################################################

SRC     =       rpi_spi_eepromtest.c

OBJ     =       rpi_spi_eepromtest.o

all:            rpi_spi_eepromtest

rpi_spi_eepromtest:        rpi_spi_eepromtest.o
        @echo [link]
        $(CC) -o $@ rpi_spi_eepromtest.o $(LDFLAGS) $(LIBS)

.c.o:
        @echo [CC] $&amp;lt;
        @$(CC) -c $(CFLAGS) $&amp;lt; -o $@

clean:
        rm -f $(OBJ) *~ core tags rpi_spi_eepromtest

tags:   $(SRC)
        @echo [ctags]
        @ctags $(SRC)

depend:
        makedepend -Y $(SRC)

# DO NOT DELETE&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Sources: rpi_spi_eepromtest.c&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;{% gist 3659646 %}&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/images/25LC010/raspberry_pi-spi-25LC010a_schem.jpg&#34;&amp;gt;&amp;lt;img src=&#34;http://jotschi.de/images/25LC010/raspberry_pi-spi-25LC010a_schem.jpg&#34; alt=&#34;&#34; title=&#34;raspberry_pi-spi-25LC010a_schem&#34; width=&#34;1024&#34; height=&#34;548&#34; class=&#34;aligncenter size-full wp-image-786&#34; /&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WiiMote PixArt Sensor Testing Via Bus Pirate </title>
      <link>http://jotschi.de/2012/08/26/wiimote-pixart-sensor-testing-via-bus-pirate/</link>
      <pubDate>Sun, 26 Aug 2012 15:52:18 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/08/26/wiimote-pixart-sensor-testing-via-bus-pirate/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The WiiMote PixArt sensor can be unsoldered and used as a regular I2C device. Here you can find some information on how to get it working with the buspirate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Unsoldering tip: Disconnect the two metal clips that are connected to the case of the sensor. You can carefully lift the sensor after that has been done. The connection wires can easily be reinserted into the sensor housing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a id=&#34;more&#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;a id=&#34;more-780&#34;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;img src=&#34;http://jotschi.de/images/pixart/pixart_pinout.jpg&#34;/&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;img src=&#34;http://jotschi.de/images/pixart/pixart_pinout_2.jpg&#34;/&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;IR Camera pin configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1: 3.3V &amp;#8594; BusPirate 3.3V &amp;amp; BusPirate VPU&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2: GND &amp;#8594; BusPirate GND&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3: GND &amp;#8594; BusPirate GND&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4: NC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5: SCL &amp;#8594; BusPirate CLK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;6: SDA &amp;#8594; BusPirate MOSI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7: CLK &amp;#8594; Connect to pin 8 of an 25MHz quartz oscillator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8: Reset &amp;#8594; Pull Up with 22k Resistor to 3.3V&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Additionally you have to provide voltage and ground for your quartz oscillator. Connect the buspirate VPU pin to VCC 3.3V.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;BusPirate Commands:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;// Reset the bus pirate
#
// Switch to I2C mode
m4
// Select I2C speed
3
// Turn off the voltage
w
// Turn on the voltage
W
// Turn on the Pulldown resistor
P
// Print the voltages
v
// Control byte, allows modification of settings / Turn camera on
[0xB0 0x30 0x01]
[0xB0 0x30 0x08]
 // 10 MAXSIZE - Maximum blob size. Wii uses values from 0x62 to 0xc8.
[0xB0 0x06 0x90]
// 15 GAIN - Sensor Gain. Smaller values = higher gain. Numerical gain is proportional to 1/2^(n/16) for n&amp;lt;0x40
[0xB0 0x08 0xC0]
// 10 GAINLIMIT - Sensor Gain Limit. Must be less than GAIN for camera to function.
[0xB0 0x1A 0x40]
[0xB0 0x33 0x33]

// Request data
[0xB0 0x36]
// Read 16 bytes of data
[0xB1 r:16]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Arduino Ethernet Shield Simple REST API Example</title>
      <link>http://jotschi.de/2012/04/21/arduino-ethernet-shield-simple-rest-api-example/</link>
      <pubDate>Sat, 21 Apr 2012 12:59:27 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/04/21/arduino-ethernet-shield-simple-rest-api-example/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m currently developing a small home security system. The arduino + ethernet shield will provide the rest api control interface for the system. Later on that interface will be controllable with my android phone. (I&amp;#8217;ll probably write another post about that).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I took the &lt;a href=&#34;http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1284844153&#34;&gt;webserver example&lt;/a&gt; from Hari Wiguna and modified it a little bit. Currently the implementation is not able the handle
 POST request or query parameters. At the moment only path segments are identified and separated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;#include &amp;lt;SPI.h&amp;gt;
#include &amp;lt;Ethernet.h&amp;gt;

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {
  0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(192,168,10, 177);

char cmd[15];
char param1[15];
boolean systemArmed = true;

#define STRING_BUFFER_SIZE 128
char buffer[STRING_BUFFER_SIZE];

EthernetServer server(80);

void setup() {
  Serial.begin(9600);
  // start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print(&#34;server is at &#34;);
  Serial.println(Ethernet.localIP());
}

void send404(EthernetClient client) {
     client.println(&#34;HTTP/1.1 404 OK&#34;);
     client.println(&#34;Content-Type: text/html&#34;);
     client.println(&#34;Connnection: close&#34;);
     client.println();
     client.println(&#34;&amp;lt;!DOCTYPE HTML&amp;gt;&#34;);
     client.println(&#34;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;404&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#34;);
}

void sendStatus(EthernetClient client) {

   // Send a standard http response header
   client.println(&#34;HTTP/1.1 200 OK&#34;);
   client.println(&#34;Content-Type: application/json&#34;);
   client.println(&#34;Connnection: close&#34;);
   client.println();
   client.println(&#34;{&#34;);

   // Output the value of each analog input pin
   for (int analogChannel = 0; analogChannel &amp;lt; 6; analogChannel++) {
       int sensorReading = analogRead(analogChannel);
       client.print(&#34;\&#34;analog_in_&#34;);
       client.print(analogChannel);
       client.print(&#34;\&#34;: &#34;);
       client.print(sensorReading);

//       if (analogChannel != 5) {
           client.println(&#34;,&#34;);
//       }
   }
   client.print(&#34;\&#34;system_armed\&#34;: &#34;);
   client.print( systemArmed );
   client.println(&#34;\n}&#34;);
}

/**
 * Parse the string and return an array which contains all path segments
 */
char** parse(char* str) {

	char ** messages;
	messages = (char**)malloc(sizeof(char *));
	char *p;
	p = strtok(str, &#34; &#34;);
	unsigned int i = 0;
	while (p != NULL) {
	  p = strtok(NULL, &#34;/&#34;);
	  char *sp;
	  boolean last = false;
	  sp = strchr(p, &#39; &#39;);
	  if (sp != NULL) {
            *sp++ = &#39;\0&#39;;
	    last = true;
	  }
	  messages[i] = p;
	  i++;
	  if (last) {
	    break;
	  }
	  messages = (char**)realloc(messages, sizeof(char *) * i + 1);
	}

	messages[i] = &#39;\0&#39;;
	return messages;
}

void armSystem() {
  systemArmed = true;
}

void disarmSystem() {
  systemArmed = false;
}

void handleCommand(EthernetClient client, char* cmd, char* param) {
    if (strcmp(cmd, &#34;status&#34;) == 0) {
      Serial.println(&#34;status&#34;);
      sendStatus(client);
    } else if (strcmp(cmd, &#34;arm&#34;) == 0) {
      armSystem();
      sendStatus(client);
      Serial.println(&#34;arm&#34;);
    } else if (strcmp(cmd, &#34;disarm&#34;) == 0) {
      disarmSystem();
      sendStatus(client);
      Serial.println(&#34;disarm&#34;);
    } else {
      send404(client);
    }
}

int countSegments(char* str) {
  int p = 0;
  int count = 0;
  while (str[p] != &#39;\0&#39;) {
    if (str[p] == &#39;/&#39;) {
      count++;
    }
    p++;
  }
  // We don&#39;t want to count the / in &#39;HTTP/1.1&#39;
  count--;
  return count;
}

void loop() {
  // listen for incoming clients
  EthernetClient client = server.available();
  if (client) {
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {

        char c;
        int bufindex = 0; // reset buffer
        buffer[0] = client.read();
        buffer[1] = client.read();
        bufindex = 2;
        // Read the first line to determin the request page
        while (buffer[bufindex-2] != &#39;\r&#39; &amp;amp;&amp;amp; buffer[bufindex-1] != &#39;\n&#39;) {
            // read full row and save it in buffer
            c = client.read();
            if (bufindex&amp;lt;STRING_BUFFER_SIZE) {
              buffer[bufindex] = c;
            }
            bufindex++;
        }
        // Clean buffer for next row
        bufindex = 0;

        // Parse the query string
        int nSegments = countSegments(buffer);
        char **pathsegments = parse(buffer);

        int i = 0;
        for(i=0; i&amp;lt;nSegments; i++) {
          Serial.println(pathsegments[i]);
        }

        if (c == &#39;\n&#39; &amp;amp;&amp;amp; currentLineIsBlank) {
          handleCommand(client, pathsegments[0], pathsegments[1]);
          break;
        }

        if (c == &#39;\n&#39;) {
          currentLineIsBlank = true;
        } else if (c != &#39;\r&#39;) {
          currentLineIsBlank = false;
        }
      }
    }
    // Give the web browser time to receive the data
    delay(1);
    // Close the connection:
    client.stop();
    Serial.println(&#34;Client disonnected&#34;);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Hetzner LXC Linux Subnet Configuration</title>
      <link>http://jotschi.de/2012/04/17/hetzner-lxc-linux-subnet-configuration/</link>
      <pubDate>Tue, 17 Apr 2012 23:50:10 +0000</pubDate>
      
      <guid>http://jotschi.de/2012/04/17/hetzner-lxc-linux-subnet-configuration/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This article will explain how to setup the configuration for a hetzner server that will expose LXC guests to the WAN with a provided subnet ip.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_ip_summary&#34;&gt;IP Summary&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Host IP: &lt;em&gt;78.46.xx.98&lt;/em&gt;
Host Gateway: &lt;em&gt;78.46.xx.97&lt;/em&gt;
Container IP: &lt;em&gt;78.46.zz.116&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_host_configuration&#34;&gt;Host Configuration&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;At first we have to configure the bridge. The the normal settings like gateway and netmask were just copied from the existing eth0 configuration.  Please take a look at &amp;lt;a href=&#34;http://www.jotschi.de/?p=554&#34;&amp;gt;my other post on LXC&amp;lt;/a&amp;gt; if you want to know how to setup lxc and bridging itself.
The pointopoint setting is the key to your routing between our host server and our lxc guests. As you can see the pointopoint points to the gateway server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;### Hetzner Online AG - installimage
# Loopback device:
auto lo
iface lo inet loopback

# device: eth0
#auto  eth0
#iface eth0 inet static
#  address   78.46.xx.98
#  broadcast 78.46.xx.127
#  netmask   255.255.255.224
#  gateway   78.46.xx.97

auto  br0
iface br0 inet static
  bridge_ports eth0
  bridge_fd 0
  address   78.46.xx.98
  broadcast 78.46.xx.127
  netmask   255.255.255.224
  pointopoint 78.46.xx.97
  gateway   78.46.xx.97

  # container 1
  up route add -host 78.46.zz.116 dev br0
  # container 2
  up route add -host 78.46.zz.118 dev br0
  # container 3
  up route add -host 78.46.zz.119 dev br0

# default route to access subnet
up route add -net 78.46.xx.96 netmask 255.255.255.224 gw 78.46.xx.97 br0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Don&amp;#8217;t forget to enable routing on your host:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;  echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_lxc_configuration&#34;&gt;LXC Configuration&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;We need to modify the LXC container specific configuration. Adding the lxc.network.ipv4 will result in lxc to provide the correct routes within the container when it is starting up. Otherwise you have to tweak your routes within your container.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;# network
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = br0
lxc.network.veth.pair = veth_cms
lxc.network.ipv4 = 78.46.zz.116/32&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_guest_configuration&#34;&gt;Guest Configuration&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The LXC container network configuration file (/etc/network/interfaces) need to be modified as well. We have to add the pointopoint setting. The host server will be used as a pointopoint endpoint and gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address 78.46.zz.116
    netmask 255.255.255.255
    pointopoint 78.46.xx.98
    gateway 78.46.xx.98
    up route add default gw 78.46.xx.98&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_routes&#34;&gt;Routes&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The container route should look like this once the container is started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@container1:/# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
78.46.xx.98     0.0.0.0         255.255.255.255 UH    0      0        0 eth0
0.0.0.0         78.46.xx.98     0.0.0.0         UG    0      0        0 eth0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your host server root should look like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@host /# route -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
78.46.zz.116    0.0.0.0         255.255.255.255 UH    0      0        0 br0
78.46.zz.118    0.0.0.0         255.255.255.255 UH    0      0        0 br0
78.46.zz.119    0.0.0.0         255.255.255.255 UH    0      0        0 br0
78.46.xx.96     78.46.xx.97     255.255.255.224 UG    0      0        0 br0
78.46.xx.96     0.0.0.0         255.255.255.224 U     0      0        0 br0
0.0.0.0         78.46.xx.97     0.0.0.0         UG    0      0        0 br0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;A german tutorial which explains this concept in combination with kvm can be found &amp;lt;a href=&#34;http://wiki.hetzner.de/index.php/KVM_mit_Nutzung_aller_IPs_aus_Subnetz&#34;&amp;gt;here&amp;lt;/a&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JavaCPP Examples</title>
      <link>http://jotschi.de/2011/09/23/javacpp-examples/</link>
      <pubDate>Fri, 23 Sep 2011 21:10:34 +0000</pubDate>
      
      <guid>http://jotschi.de/2011/09/23/javacpp-examples/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I finally found the time to write post about the javacpp &amp;lt;a href=&#34;https://github.com/Jotschi/javacpp-examples&#34;&amp;gt;examples&amp;lt;/a&amp;gt; i created since i wanted to explore the capabilities of the &amp;lt;a href=&#34;http://code.google.com/p/javacpp/&#34;&amp;gt;JavaCPP library&amp;lt;/a&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;strong&gt;Please note that the examples are only tested under linux and probably won&amp;#8217;t run on windows/mac.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The examples can be fetched from my &lt;a href=&#34;https://github.com/Jotschi/javacpp-examples&#34;&gt;github repository&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;So far i created four different examples. Each for a specific usecase:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_javacpp_sharedlib_example&#34;&gt;javacpp-sharedlib-example&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This example shows how to use a own cpp shared library with the library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The example consists of multiple pieces that finally work together.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;1. Cube.cpp&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The shared lib will be created from the Cube cpp class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;#include &#34;Cube.h&#34;

void Cube::setSide(double s) {
	side = s &amp;lt;= 0 ? 1 : s;
}

double Cube::getSide() {
	return side;
}

double Cube::getArea() {
	return 6 * side * side;
}

double Cube::getVolume() {
	return side * side * side;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;Cube.h&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;#ifndef CUBE_H
#define CUBE_H

class Cube {
	private:
		double side;
	public:
		Cube() {};
		~Cube() {};

		// copy constructor
		Cube(class Cube&amp;amp; cube) {
			side = cube.side;
		}

		void setSide(double s);
		double getSide();
		double getArea();
		double getVolume();
};

#endif&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_2_javacube_java&#34;&gt;2. JavaCube.java&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The JavaCube java class acts as a wrapper/glue that fits between the gap of java and native code. Normally you would here defined your jni hooks which then would be implemented. Since i use JavaCPP this step is radically simplified. The annotations are used to give javacpp all the information it needs to prepare its g++ command that in the final compile step will create the library that can be shipped with the java program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;package de.jotschi.javacpp.example;
import static com.googlecode.javacpp.Loader.load;

import com.googlecode.javacpp.Pointer;
import com.googlecode.javacpp.annotation.Name;
import com.googlecode.javacpp.annotation.Platform;

@Platform(include = &#34;Cube.h&#34;, link = &#34;Cube&#34;)
public class JavaCube {

	NativeCube cube;
	static {
		load();
	}

	public JavaCube() {
		cube = new NativeCube();
	}

	public void setSide(double s) {
		cube.setSide(s);

	}

	public double getArea() {
		return cube.getArea();
	}

	public double getSide() {
		return cube.getSide();
	}

	public double getVolume() {
		return cube.getVolume();
	}

	@Name(&#34;Cube&#34;)
	public static class NativeCube extends Pointer {

		static {
			load();
		}

		public NativeCube() {
			allocate();
		}

		public NativeCube(Pointer p) {
			super(p);
		}

		public native void setSide(double s);

		// this = new Cube()
		private native void allocate();

		private native double getArea();

		private native double getSide();

		private native double getVolume();

	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Once the java files have been compiled the exec-maven-plugin will be executed which itself executes the makefile that builds the shared library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&amp;lt;execution&amp;gt;
	&amp;lt;id&amp;gt;build-sharedlib&amp;lt;/id&amp;gt;
	&amp;lt;phase&amp;gt;process-classes&amp;lt;/phase&amp;gt;
	&amp;lt;goals&amp;gt;
		&amp;lt;goal&amp;gt;exec&amp;lt;/goal&amp;gt;
	&amp;lt;/goals&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;executable&amp;gt;make&amp;lt;/executable&amp;gt;
		&amp;lt;commandlineArgs&amp;gt;main&amp;lt;/commandlineArgs&amp;gt;
		&amp;lt;workingDirectory&amp;gt;${basedir}/src/main/jni&amp;lt;/workingDirectory&amp;gt;
	&amp;lt;/configuration&amp;gt;
&amp;lt;/execution&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This library will be used within the next execution of the exec-maven-plugin. This final execution step will invoke the javacpp builder which generated the jni headers from the java class annotations and it also compiles the jni header interface against the previously created library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&amp;lt;execution&amp;gt;
	&amp;lt;id&amp;gt;build-jnilib&amp;lt;/id&amp;gt;
	&amp;lt;phase&amp;gt;process-classes&amp;lt;/phase&amp;gt;
	&amp;lt;goals&amp;gt;
		&amp;lt;goal&amp;gt;exec&amp;lt;/goal&amp;gt;
	&amp;lt;/goals&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;executable&amp;gt;java&amp;lt;/executable&amp;gt;
		&amp;lt;commandlineArgs&amp;gt;-jar ../libs/javacpp.jar -Dcompiler.linkpath=${basedir}/target/classes/linux-x86 -Dcompiler.includepath=${basedir}/src/main/jni -classpath target/classes de.jotschi.javacpp.example.JavaCube&amp;lt;/commandlineArgs&amp;gt;
	&amp;lt;/configuration&amp;gt;
&amp;lt;/execution&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The CubeTest.java Junit tests shows how the created java class that wraps the native class works.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_javacpp_libc6_example_javacpp_stdlib_example&#34;&gt;javacpp-libc6-example / javacpp-stdlib-example&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;These examples are very similar to the javacpp-sharedlib-example. The libc6 example show how to use JavaCPP with the libc6 library and c code. The stdlib example on the other hand uses the c++ stdlib.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_javacpp_android_example&#34;&gt;javacpp-android-example&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This example shows how to use a android maven project in combination with JavaCPP. The example shows how to mix java with native code. The java part creates a opengl surface and the native code is used to execute a opengl function that changed the color of the display.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Eclipse CDT Cross Platform Development Within A Chroot Environment</title>
      <link>http://jotschi.de/2011/07/08/eclipse-cdt-cross-platform-development-within-a-chroot-environment/</link>
      <pubDate>Fri, 08 Jul 2011 18:36:49 +0000</pubDate>
      
      <guid>http://jotschi.de/2011/07/08/eclipse-cdt-cross-platform-development-within-a-chroot-environment/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This post is about how to configure eclipse to work with a chroot environment that is setup for cross compiling against ARM architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please refer to my post &amp;lt;a href=&#34;http://jotschi.de/?p=594&#34;&amp;gt;Cross Compile Pandaboard PowerVR OpenGL ES2 Example&amp;lt;/a&amp;gt; if you want to know how to setup a chroot environment for cross compiling.
&amp;lt;a id=&#34;more&#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;a id=&#34;more-615&#34;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_1_install_sudo_and_configure_sudo&#34;&gt;1. Install sudo and configure sudo&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Install sudo:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install sudo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Allow every user that is within the sudo group to execute the chroot command without entering a password by adding the line to /etc/sudoers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;/etc/sudoers&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;%sudo   ALL= NOPASSWD: /usr/sbin/chroot&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_2_prepare_the_project&#34;&gt;2. Prepare the project&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The project must be located within the within the chroot environment. You could use bind mounts to create a mountpoint that connects your workspace project with a folder inside the chroot enviroment. I just placed the project itself inside the chroot environment and created a symlink that points to my workspace. Keep in mind to close your project or eclipse if you move the project files outside of eclipse.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1. Create your CDT project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2. Close the project within eclipse.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3. Move the project directory from e.g.: ~/workspace/MyProject/ to ~/mychroot/opt/MyProject&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4. Create a symlink inside of ~/workspace with the name &amp;lt;i&amp;gt;MyProject&amp;lt;/i&amp;gt; that points to ~/mychroot/opt/MyProject&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5. Open the project within eclipse&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;h3&amp;gt;3. Create a external build script&amp;lt;/h3&amp;gt;
This example script (e.g: ~/workspace/MyProject/compile.sh) will execute the bash command inside of the chroot environment which is located at $HOME/mychroot. The bash command will switch into the project location inside the chroot environment and execute make. Of course you can optimize the script to make it more generic and so on. But for now i&amp;#8217;ll keep it simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;#!/bin/bash
sudo chroot $HOME/mychroot/  bash -c &#39;cd /opt/MyProject/; make clean; make&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;sect2&#34;&gt;
&lt;h3 id=&#34;_4_configure_your_eclipse_cdt_project&#34;&gt;4. Configure your eclipse cdt project&lt;/h3&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Now we have to change the builder for our project. Since we don&amp;#8217;t want to use the host environment to build the project we need to tell eclipse to use our compile.sh script which we created earlier. Go into &amp;lt;i&amp;gt;project properties &amp;#8594; C/C++ Build &amp;#8594; Builder Settings&amp;lt;/i&amp;gt; and select &lt;em&gt;External builder&lt;/em&gt;. Point the Build command to your compile.sh.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To fix syntax errors within your project you have to add the correct includes of course. Go to &amp;lt;i&amp;gt;project properties &amp;#8594; C/C++ Build &amp;#8594; Setting &amp;#8594; Tool Settings&amp;lt;/i&amp;gt; and add the include directories from your chroot enviroment. If you are using xapt to install cross libraries please note that those files are usually located at &lt;em&gt;/usr/arm-linux-gnueabi/&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Example for libx11-dev&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;root@NeXuS:/# dpkg -L  libx11-dev-armel-cross
/.
/usr
/usr/share
/usr/share/doc
/usr/share/doc/libx11-dev-armel-cross
/usr/share/doc/libx11-dev-armel-cross/README
/usr/arm-linux-gnueabi
/usr/arm-linux-gnueabi/include
/usr/arm-linux-gnueabi/include/X11
/usr/arm-linux-gnueabi/include/X11/Xregion.h
/usr/arm-linux-gnueabi/include/X11/Xresource.h
/usr/arm-linux-gnueabi/include/X11/Xlib.h
/usr/arm-linux-gnueabi/include/X11/cursorfont.h
/usr/arm-linux-gnueabi/include/X11/XKBlib.h
/usr/arm-linux-gnueabi/include/X11/Xlibint.h
/usr/arm-linux-gnueabi/include/X11/Xutil.h
/usr/arm-linux-gnueabi/include/X11/XlibConf.h
/usr/arm-linux-gnueabi/include/X11/ImUtil.h
/usr/arm-linux-gnueabi/include/X11/Xlocale.h
/usr/arm-linux-gnueabi/include/X11/Xcms.h
/usr/arm-linux-gnueabi/lib
/usr/arm-linux-gnueabi/lib/pkgconfig
/usr/arm-linux-gnueabi/lib/pkgconfig/x11.pc
/usr/arm-linux-gnueabi/lib/libX11.a
/usr/arm-linux-gnueabi/lib/libX11.so&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>LXC (Linux Containers) For Debian Squeeze</title>
      <link>http://jotschi.de/2011/07/04/lxc-linux-containers-for-debian-squeeze/</link>
      <pubDate>Mon, 04 Jul 2011 21:17:11 +0000</pubDate>
      
      <guid>http://jotschi.de/2011/07/04/lxc-linux-containers-for-debian-squeeze/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Today i migrated my vservers to LXC. LXC is similar to Linux VServers and OpenVZ but with one big difference. You don&amp;#8217;t need to install a custom/patched Kernel for LXC since the support is included within the Kernel Mainline. As for Debian Linux VServers support will be dropped in future releases. This means LXC is the way to go. Okay enough talking. Lets get to work.&amp;lt;a id=&#34;more&#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;a id=&#34;more-554&#34;&amp;gt;&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_setup&#34;&gt;Setup&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Install Linux Containers&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install lxc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Add cgroup mount point:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir -p /var/local/cgroup
echo &#34;cgroup  /var/local/cgroup  cgroup  defaults  0  0&#34; &amp;gt;&amp;gt; /etc/fstab
mount -a&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Install bridge utils&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install bridge-utils&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Convert your eth0 configuration into a br0 bridge configuration:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;# The primary network interface
#auto eth0
#allow-hotplug eth0
#iface eth0 inet static
#address 192.168.10.1
#netmask 255.255.255.0

auto br0
iface br0 inet static
   bridge_ports eth0
   bridge_fd 0
   address 192.168.10.1
   netmask 255.255.255.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Please keep in mind that this change might also affect your firewall settings and/or other connections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Enable IP forwarding&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Create a new container.
I used a modified version of the lxc-debian template script from Daniel Lezcano which is included in the LXC debian package. It can be found here /usr/lib/lxc/templates/lxc-debian. The modfied version can be downloaded &amp;lt;a href=&#34;http://jotschi.de/downloads/lxc/lxc-debian&#34;&amp;gt;here&amp;lt;/a&amp;gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;wget http://www.jotschi.de/downloads/lxc/lxc-debian
chmod +x lxc-debian
./lxc-debian
./lxc-debian squeeze test 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Your container with the name test will be installed at /var/lib/lxc/test.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Adapt container network configuration
For my configuration i had to adapt the resolv.conf and the /etc/network/interfaces file.
I changed the nameserver to 192.168.10.1 since my nameserver is running of that ip.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;nameserver 192.168.10.1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I also adapted the container  /etc/network/interfaces file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;auto eth0
iface eth0 inet static
    address 192.168.10.26
    netmask 255.255.255.0
    gateway 192.168.10.1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;You can edit those file outside of your conainer by editing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;/var/lib/lxc/test/rootfs/etc/network/interfaces
/var/lib/lxc/test/rootfs/etc/resolv.conf&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Start the container&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;lxc-start -n test -d&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;olist arabic&#34;&gt;
&lt;ol class=&#34;arabic&#34;&gt;
&lt;li&gt;
&lt;p&gt;Enter the conainer&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;lxc-console -n test&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The default login is root/root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Use this manual for migrating linux vservers to lxc:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://schmidi2.blog.com/2010/10/25/migrating-from-vserver-to-lxc/&#34;&gt;migrating-from-vserver-to-lxc&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>FreeNX 3.4 and Debian Testing - Stuck Keys</title>
      <link>http://jotschi.de/2010/02/27/freenx-3-4-and-debian-testing-stuck-keys/</link>
      <pubDate>Sat, 27 Feb 2010 18:00:26 +0000</pubDate>
      
      <guid>http://jotschi.de/2010/02/27/freenx-3-4-and-debian-testing-stuck-keys/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When using FreeNX 3.4 as server version i stumbled uppon an odd problem. My control (ctrl right) and alt gr key got stuck. By using xev i found out that the keyup event was never triggered. If i disabled the powerful freenx compression the event was handled correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The solution was rather simple. I just reverted to 3.3 and everything seems to work now properly.
&amp;lt;a id=&#34;more&#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;a id=&#34;more-482&#34;&amp;gt;&amp;lt;/a&amp;gt;
You can download the previous version here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre&gt;wget http://64.34.161.181/download/3.3.0/Linux/nxnode_3.3.0-17_i386.deb
wget http://64.34.161.181/download/3.3.0/Linux/nxclient_3.3.0-6_i386.deb
wget http://64.34.161.181/download/3.3.0/Linux/FE/nxserver_3.3.0-15_i386.deb&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Debian Kernel 2.6.30-1 and JVM Socket Issues</title>
      <link>http://jotschi.de/2010/01/30/debian-kernel-2-6-30-1-and-jvm-socket-issues/</link>
      <pubDate>Sat, 30 Jan 2010 11:46:58 +0000</pubDate>
      
      <guid>http://jotschi.de/2010/01/30/debian-kernel-2-6-30-1-and-jvm-socket-issues/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Due to an update of my linux kernel i stumbled upon a strange issue. I could not get sockets working properly. After some googling i figured out that it had to be a network configuration issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;By default (Debian Testing) sockets bind only to ipv6.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The socket binding behaviour can be configured within:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat /etc/sysctl.d/bindv6only.conf
Set the parameter from net.ipv6.bindv6only=1 to net.ipv6.bindv6only=0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;To test the setting you can also use the following command:
&amp;lt;blockquote&amp;gt;sysctl -w net.ipv6.bindv6only=0&amp;lt;/blockquote&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The error messages might be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Caused by: java.net.SocketException: Network is unreachable
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:333)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:195)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:182)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
	at java.net.Socket.connect(Socket.java:525)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Or for debugging java:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;FATAL ERROR in native method: JDWP No transports initialized, jvmtiError=AGENT_ERROR_TRANSPORT_INIT(197)
ERROR: transport error 202: connect failed: Connection refused
ERROR: JDWP Transport dt_socket failed to initialize, TRANSPORT_INIT(510)
JDWP exit error AGENT_ERROR_TRANSPORT_INIT(197): No transports initialized [../../../src/share/back/debugInit.c:690]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>OpenGL Tesselation Techniques Comparison </title>
      <link>http://jotschi.de/2009/12/16/opengl-tesselation-techniques-comparison/</link>
      <pubDate>Wed, 16 Dec 2009 01:22:24 +0000</pubDate>
      
      <guid>http://jotschi.de/2009/12/16/opengl-tesselation-techniques-comparison/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;There is a variety of different tesselation techniques you can use within openGL. This post should give a overview over the different techniques currently available:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;{% youtube Bcalc8UoJzo %}&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;1. External Library:&lt;/em&gt;
&amp;lt;a href=&#34;http://www.cs.cmu.edu/~quake/triangle.html&#34;&amp;gt;Triangle&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pro&amp;#8217;s: More flexibel usage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Con&amp;#8217;s: Doesn&amp;#8217;t use GPU computing capabilities&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;2. Static pipeline functionality provided by GLU the GLUtesselator:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://jotschi.de/?p=466&#34;&amp;gt;OpenGL GLU Tesselation Method Without DisplayLists&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pro&amp;#8217;s: Simple to use&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Con&amp;#8217;s: Doesn&amp;#8217;t use GPU computing capabilities&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;3. Using the GL_AMD_vertex_shader_tessellator extension from AMD / ATI&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://www.opengl.org/registry/specs/AMD/vertex_shader_tessellator.txt&#34;&amp;gt;Spec: vertex_shader_tessellator&amp;lt;/a&amp;gt;
&amp;lt;a href=&#34;http://jotschi.de/?p=460&#34;&amp;gt;OpenGL AMD Tesselation Example (CatmullCark SubDivision) - Linux&amp;lt;/a&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pro&amp;#8217;s: Does use GPU computing features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Con&amp;#8217;s: Does not work with Nvidia cards at all&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;4. Using OpenGL 3.2 Geometry Shader Extensions:&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;a href=&#34;http://www.opengl.org/registry/specs/EXT/geometry_shader4.txt&#34;&amp;gt;Spec: geometry_shader4&amp;lt;/a&amp;gt;
&amp;lt;a href=&#34;http://wiki.delphigl.com/index.php/shader_tesselation&#34;&amp;gt;&lt;a href=&#34;http://wiki.delphigl.com/index.php/shader_tesselation&amp;lt;/a&amp;gt&#34; class=&#34;bare&#34;&gt;http://wiki.delphigl.com/index.php/shader_tesselation&amp;lt;/a&amp;gt&lt;/a&gt;;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pro&amp;#8217;s: Does use GPU computing features&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Con&amp;#8217;s: GPU must Shader Model 4&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>OpenGL GLU Tesselation Method Without DisplayLists</title>
      <link>http://jotschi.de/2009/12/15/opengl-glu-tesselation-method-without-displaylists/</link>
      <pubDate>Tue, 15 Dec 2009 23:23:32 +0000</pubDate>
      
      <guid>http://jotschi.de/2009/12/15/opengl-glu-tesselation-method-without-displaylists/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Due to the deprecation of &#39;DisplayLists&#39; within OpenGL 3.2 i wanted to store my tessellated mesh within a structure which i could use later on. Therefor it is possible to use the GLU_TESS_VERTEX_DATA, GLU_TESS_BEGIN_DATA etc gluTessCallback hooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When calling the gluTessBeginPolygon method it is possible to pass a address to a own structure along as second argument. This address will be handled to the callback methods and therefor you can access your defined data structure to store the tessellated data within it. My example shows how to deal with that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I use the &lt;a href=&#34;http://glm.g-truc.net/about.html&#34;&gt;OpenGL Mathematics Library&lt;/a&gt; to handle my points.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;img src=&#34;http://jotschi.de/images/tesselation/tesselation_star.png&#34; alt=&#34;tesselation_star&#34; title=&#34;tesselation_star&#34; width=&#34;240&#34; height=&#34;216&#34; class=&#34;alignnone size-full wp-image-468&#34; /&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;img src=&#34;http://jotschi.de/images/tesselation/tesselation_star_wire.png&#34; alt=&#34;tesselation_star_wire&#34; title=&#34;tesselation_star_wire&#34; width=&#34;232&#34; height=&#34;205&#34; class=&#34;alignnone size-full wp-image-469&#34; /&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;GL_GLUT_TesselationData.cpp&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;listingblock&#34;&gt;
&lt;div class=&#34;content&#34;&gt;
&lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;#include &amp;lt;GL/glut.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &#34;glm/glm.hpp&#34;
using namespace std;

//#define USEDISPLAYLIST

GLuint startList;
GLdouble **dataOutFinal;

#ifndef USEDISPLAYLIST
struct Mesh {
	std::vector&amp;lt;glm::vec3&amp;gt; points;
	GLenum type;
} mesh;
#endif

GLdouble rect[4][3] = { 50.0, 50.0, 0.0, 200.0, 50.0, 0.0, 200.0, 140.0, 0.0,
		50.0, 200.0, 0.0 };

GLdouble star[5][6] = { 250.0, 50.0, 0.0, 1.0, 0.0, 1.0, 325.0, 200.0, 0.0,
		1.0, 1.0, 0.0, 400.0, 50.0, 0.0, 0.0, 1.0, 1.0, 250.0, 150.0, 0.0, 1.0,
		0.0, 0.0, 400.0, 150.0, 0.0, 0.0, 1.0, 0.0 };

void display(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0, 0.5, 1.0);

	// Enable this to see the wireframe
	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

#ifndef USEDISPLAYLIST
	vector&amp;lt;glm::vec3&amp;gt;::const_iterator cii;
	glBegin(mesh.type);
	for (cii = mesh.points.begin(); cii != mesh.points.end(); cii++) {
		glVertex3f((*cii).x, (*cii).y, (*cii).z);
		printf(&#34;Result: %f,%f,%f\n&#34;, (*cii).x, (*cii).y, (*cii).z);
	}
	glEnd();
#else
	glCallList(startList);
#endif

	glFlush();
}

void beginCallback(GLenum which, void *resultMesh) {
	printf(&#34;Type: %i\n&#34;, which);
#ifdef USEDISPLAYLIST
	glBegin(which);
#else
	Mesh *myMesh = (Mesh*) resultMesh;
	(*myMesh).type = which;
#endif

}

void errorCallback(GLenum errorCode) {
	const GLubyte *estring;
	estring = gluErrorString(errorCode);
	fprintf(stderr, &#34;Tessellation Error: %s\n&#34;, estring);
	exit(0);
}

void endCallback(void *tessellationSetAddress) {
#ifdef USEDISPLAYLIST
	glEnd();
#endif
}

void vertexCallback(GLvoid *data, void *resultMesh) {
	const GLdouble *pointer;
	pointer = (GLdouble *) data;
#ifdef USEDISPLAYLIST
	glColor3dv(pointer + 3);
	glVertex3dv(pointer);
#else
	Mesh *myMesh = (Mesh*) resultMesh;
	(*myMesh).points.push_back(glm::vec3(pointer[0], pointer[1], pointer[2]));
#endif
	printf(&#34;Added new vertex[%f][%f][%f]\n&#34;, pointer[0], pointer[1], pointer[2]);

}

void combineCallback(GLdouble coords[3], GLdouble *vertex_data[4],
		GLfloat weight[4], GLdouble **dataOut, void *resultMesh) {

	GLdouble *vertex;
	vertex = (GLdouble *) malloc(6 * sizeof(GLdouble));
	vertex[0] = coords[0];
	vertex[1] = coords[1];
	vertex[2] = coords[2];

#ifndef USEDISPLAYLIST
	Mesh *myMesh = (Mesh*) resultMesh;
	(*myMesh).points.push_back(glm::vec3(vertex[0], vertex[1], vertex[2]));
#endif
	printf(&#34;Added combine vertex[%f][%f][%f]\n&#34;, vertex[0], vertex[1],
			vertex[2]);

	*dataOut = vertex;

}

void init(void) {
	GLUtesselator *tobj;

	glClearColor(0.0, 0.0, 0.0, 0.0);

	tobj = gluNewTess();
	gluTessCallback(tobj, GLU_TESS_VERTEX_DATA, (void(*)()) vertexCallback);
	gluTessCallback(tobj, GLU_TESS_BEGIN_DATA, (void(*)()) beginCallback);
	gluTessCallback(tobj, GLU_TESS_END_DATA, (void(*)()) endCallback);
	gluTessCallback(tobj, GLU_TESS_ERROR, (void(*)()) errorCallback);
	gluTessCallback(tobj, GLU_TESS_COMBINE_DATA, (void(*)()) combineCallback);

#ifdef USEDISPLAYLIST
	startList = glGenLists(1);
	glNewList(startList, GL_COMPILE);
#endif

	glShadeModel(GL_SMOOTH);
	gluTessProperty(tobj, GLU_TESS_WINDING_RULE, GLU_TESS_WINDING_POSITIVE);

#ifdef USEDISPLAYLIST
	gluTessBeginPolygon(tobj, NULL);
#else
	gluTessBeginPolygon(tobj, &amp;amp;mesh);
#endif

	/*
	 gluTessBeginContour(tobj);
	 gluTessVertex(tobj, rect[0], rect[0]);
	 gluTessVertex(tobj, rect[1], rect[1]);
	 gluTessVertex(tobj, rect[2], rect[2]);
	 gluTessVertex(tobj, rect[3], rect[3]);
	 gluTessEndContour(tobj);
	 */

	gluTessBeginContour(tobj);
	gluTessVertex(tobj, star[0], star[0]);
	gluTessVertex(tobj, star[1], star[1]);
	gluTessVertex(tobj, star[2], star[2]);
	gluTessVertex(tobj, star[3], star[3]);
	gluTessVertex(tobj, star[4], star[4]);
	gluTessEndContour(tobj);

	gluTessEndPolygon(tobj);

#ifdef USEDISPLAYLIST
	glEndList();
#endif
	gluDeleteTess(tobj);

	printf(&#34;Done\n&#34;);

}

void reshape(int w, int h) {
	glViewport(0, 0, (GLsizei) w, (GLsizei) h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, (GLdouble) w, 0.0, (GLdouble) h);
}

void keyboard(unsigned char key, int x, int y) {
	switch (key) {
	case 27:
		exit(0);
		break;
	}
}

int main(int argc, char** argv) {
	glutInit(&amp;amp;argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutCreateWindow(argv[0]);
	init();
	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>OpenGL AMD Tesselation Example (CatmullCark SubDivision) - Linux</title>
      <link>http://jotschi.de/2009/12/15/opengl-amd-tesselation-example-catmullcark-subdivision-linux/</link>
      <pubDate>Tue, 15 Dec 2009 02:22:53 +0000</pubDate>
      
      <guid>http://jotschi.de/2009/12/15/opengl-amd-tesselation-example-catmullcark-subdivision-linux/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;While searching for a tesselation example i stumbled uppon this example. It uses the GL_AMD_vertex_shader_tessellator extension.
&amp;lt;a id=&#34;more&#34;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;a id=&#34;more-460&#34;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;img src=&#34;http://jotschi.de/images/tesselation/tesselation_raw_demo.png&#34; alt=&#34;tesselation_raw_demo&#34; title=&#34;tesselation_raw_demo&#34; width=&#34;640&#34; height=&#34;480&#34; class=&#34;alignnone size-full wp-image-461&#34; /&amp;gt;
&amp;lt;img src=&#34;http://jotschi.de/images/tesselation/tesselation_raw_demo_2.png&#34; alt=&#34;tesselation_raw_demo_2&#34; title=&#34;tesselation_raw_demo_2&#34; width=&#34;640&#34; height=&#34;480&#34; class=&#34;alignnone size-full wp-image-462&#34; /&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Documents can be found here:
&amp;lt;a href=&#34;http://www.opengl.org/registry/specs/AMD/vertex_shader_tessellator.txt&#34;&amp;gt;&lt;a href=&#34;http://www.opengl.org/registry/specs/AMD/vertex_shader_tessellator.txt&amp;lt;/a&amp;gt&#34; class=&#34;bare&#34;&gt;http://www.opengl.org/registry/specs/AMD/vertex_shader_tessellator.txt&amp;lt;/a&amp;gt&lt;/a&gt;;
&amp;lt;a href=&#34;http://developer.amd.com/GPU/WGSDK/Pages/default.aspx&#34;&amp;gt;&lt;a href=&#34;http://developer.amd.com/GPU/WGSDK/Pages/default.aspx&amp;lt;/a&amp;gt&#34; class=&#34;bare&#34;&gt;http://developer.amd.com/GPU/WGSDK/Pages/default.aspx&amp;lt;/a&amp;gt&lt;/a&gt;;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mars Society startet &#39;Humans To Mars&#39; Petition</title>
      <link>http://jotschi.de/2009/12/14/mars-society-startet-humans-to-mars-petition/</link>
      <pubDate>Mon, 14 Dec 2009 23:06:49 +0000</pubDate>
      
      <guid>http://jotschi.de/2009/12/14/mars-society-startet-humans-to-mars-petition/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Mit einer globalen &amp;lt;a href=&#34;http://www.HumansToMars.org&#34;&amp;gt;Petition&amp;lt;/a&amp;gt; will die Mars Society auf den diesjÃ¤hrigen Report der Augustine Kommission (&amp;lt;a href=&#34;http://www.nasa.gov/offices/hsf/meetings/10_22_pressconference.html&#34;&amp;gt;Review of United States Human Space Flight Plans Committee&amp;lt;/a&amp;gt;) reagieren und US PrÃ¤sident Obama auf den Nutzen von einer bemannten Marsmission hinzuweisen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&amp;lt;object width=&#34;400&#34; height=&#34;300&#34;&amp;gt;&amp;lt;param name=&#34;allowfullscreen&#34; value=&#34;true&#34; /&amp;gt;&amp;lt;param name=&#34;allowscriptaccess&#34; value=&#34;always&#34; /&amp;gt;&amp;lt;param name=&#34;movie&#34; value=&#34;http://vimeo.com/moogaloop.swf?clip_id=7270323&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&#34; /&amp;gt;&amp;lt;embed src=&#34;http://vimeo.com/moogaloop.swf?clip_id=7270323&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&#34; type=&#34;application/x-shockwave-flash&#34; allowfullscreen=&#34;true&#34; allowscriptaccess=&#34;always&#34; width=&#34;400&#34; height=&#34;300&#34;&amp;gt;&amp;lt;/embed&amp;gt;&amp;lt;/object&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&#34;http://vimeo.com/7270323&#34;&amp;gt;HSF Committee-Press Conference&amp;lt;/a&amp;gt; from &amp;lt;a href=&#34;http://vimeo.com/user1955131&#34;&amp;gt;U.S. HSF Committee&amp;lt;/a&amp;gt; on &amp;lt;a href=&#34;http://vimeo.com&#34;&amp;gt;Vimeo&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Dies ist meiner Meinung nach gar nicht so verkehrt wenn man bedenkt, dass das Space Shuttle 2010 auÃŸer Dienst gestellt werden soll und sich 5 - 8 Jahre lang keine MÃ¶glichkeit fÃ¼r die USA bietet die ISS zu erreichen. Mike Griffin, der letzte Nasa Administator, hat zu seiner Zeit alle Weichen gestellt damit das Space Shuttle so frÃ¼h wie MÃ¶glich auÃŸer Dienst gestellt werden kann und die Entwicklung im &amp;lt;a href=&#34;http://en.wikipedia.org/wiki/Project_Constellation&#34;&amp;gt;Constellation Programm&amp;lt;/a&amp;gt; so schnell wie MÃ¶glich beginnen kann. Nach der Aktuellen Politik und Orientierung des PrÃ¤sidenten und der NASA Administration ist es jedoch fraglich in wie weit die Realisierung des Constellation Programms Ã¼berhaupt voranschreiten wird.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;WÃ¼nschenswert wÃ¤re es wenn man die Zeit in der die USA Ã¼ber kein Transportmittel zur ISS verfÃ¼gen, auch &#39;The Gap&#39; genannt, deutlich verkÃ¼rzen kÃ¶nnte. Hierzu mÃ¼sste man nur mehr Mittel fÃ¼r das Constellation Programm bereitstellen.
Man sollte hier auch beachten das die ISS mindestens bis 2015 - 2020 betrieben werden soll. Nach dem aktuellen Plan hÃ¤tte man also im Idealfall hÃ¶chstens 2 Jahre lang die MÃ¶glichkeit die ISS mit Orion zu erreichen bevor die Raumstation aufgegeben wird. Wenn hierzu noch eine Ansage gemacht wÃ¼rde, ein Ziel gesetzt wÃ¼rde z.B. den Mars zu erreichen anstatt den Mond wÃ¼rde dies meiner Meinung nach auch die Politik des PrÃ¤sidenten unterstÃ¼tzen. Er will Bildung fÃ¶rdern wo es nur geht. Aber wo fÃ¤ngt Bildung denn an? Meiner Meinung nach in den KÃ¶pfen der Menschen. Ein Ziel wie es frÃ¼her von PrÃ¤sident Kennedy gesetzt wurde schafft es zu Inspirieren und zu vereinen. Genau dieser Punkt wurde auch bei der Vorstellung des Reports von der Augustine Kommission als ein wichtiges Argument zur UnterstÃ¼tzung der Bemannten Raumfahrt genannt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Der Report der Augustine Kommission nennt zudem auch einige alternativen welche &#39;The Gap&#39; Ã¼berbrÃ¼cken kÃ¶nnten. Hierzu zÃ¤hlen Entwicklung einer Ares/Orion Light Kombination, Private Entwicklung einer TransportlÃ¶sung in Auftrag geben, sich auf Russland verlassen. Meiner Meinung nach sind dies jedoch nur NotlÃ¶sungen welche das Problem verschieben.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ich bleibe gespannt wie sich NASA / US PlÃ¤ne durch die Einstellung des Space Shuttles weiterentwickeln.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Es ist somit nicht verkehrt die Petition zu unterzeichne wenn man fÃ¼r die bemannte Raumfahrt ist und Zeichen setzten mÃ¶chte.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>